{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/users": {
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all users",
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get a user by id",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Update a user",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully deleted."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Delete a user",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/auth/login/request-otp": {
      "post": {
        "description": "Send OTP to phone number for login authentication",
        "operationId": "AuthController_requestLoginOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtpResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User not found or account inactive"
          }
        },
        "summary": "Request OTP for login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/login/verify-otp": {
      "post": {
        "description": "Verify OTP code and complete login process",
        "operationId": "AuthController_verifyLoginOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid OTP or user not found"
          }
        },
        "summary": "Verify OTP and login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/login/password": {
      "post": {
        "description": "Login using phone number and password",
        "operationId": "AuthController_loginWithPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordLoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Login with password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "description": "Send OTP to phone number for user registration",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtpResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User already exists"
          }
        },
        "summary": "Request OTP for registration",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/register/verify-otp": {
      "post": {
        "description": "Verify OTP code and complete user registration",
        "operationId": "AuthController_verifyRegistrationOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid OTP"
          }
        },
        "summary": "Verify registration OTP and create account",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "description": "Get new access token using refresh token",
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "description": "Logout user and invalidate tokens",
        "operationId": "AuthController_logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "description": "Send OTP for password reset",
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset OTP sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtpResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "User not found or account inactive"
          }
        },
        "summary": "Request password reset OTP",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "description": "Reset password using OTP verification",
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "401": {
            "description": "Invalid OTP"
          }
        },
        "summary": "Reset password with OTP",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/change-password": {
      "post": {
        "description": "Change user password with current password verification",
        "operationId": "AuthController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Current password is incorrect"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Change password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/profile": {
      "get": {
        "description": "Get authenticated user profile information",
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/sessions": {
      "get": {
        "description": "Get list of active user sessions",
        "operationId": "AuthController_getActiveSessions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active sessions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get active sessions",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/sms-test/send-test": {
      "post": {
        "description": "Send a test SMS to verify SMS provider configuration",
        "operationId": "SmsTestController_sendTestSms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test SMS sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "messageId": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Send test SMS (Admin only)",
        "tags": [
          "SMS Testing"
        ]
      }
    },
    "/api/v1/sms-test/providers/status": {
      "get": {
        "description": "Get the status and configuration of all SMS providers",
        "operationId": "SmsTestController_getProvidersStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SMS providers status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "enabled": {
                            "type": "boolean"
                          },
                          "configured": {
                            "type": "boolean"
                          },
                          "priority": {
                            "type": "number"
                          },
                          "lastTest": {
                            "type": "string"
                          },
                          "balance": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "totalProviders": {
                      "type": "number"
                    },
                    "activeProviders": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get SMS providers status (Admin only)",
        "tags": [
          "SMS Testing"
        ]
      }
    },
    "/api/v1/sms-test/health": {
      "get": {
        "description": "Check if SMS service is healthy and configured properly",
        "operationId": "SmsTestController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SMS service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "healthy": {
                      "type": "boolean"
                    },
                    "providers": {
                      "type": "number"
                    },
                    "configured": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "SMS service health check",
        "tags": [
          "SMS Testing"
        ]
      }
    },
    "/api/v1/sms-test/validate-phone": {
      "post": {
        "description": "Validate if a phone number is in correct Vietnamese format",
        "operationId": "SmsTestController_validatePhoneNumber",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Phone number validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    },
                    "formatted": {
                      "type": "string"
                    },
                    "carrier": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate Vietnamese phone number",
        "tags": [
          "SMS Testing"
        ]
      }
    },
    "/api/v1/auth/mfa/methods": {
      "get": {
        "description": "Get all active MFA methods for the current user",
        "operationId": "MfaController_getMfaMethods",
        "parameters": [],
        "responses": {
          "200": {
            "description": "MFA methods retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user MFA methods",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/status": {
      "get": {
        "description": "Check if the user has MFA enabled and which methods are available",
        "operationId": "MfaController_getMfaStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "MFA status retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Check MFA requirement status",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/setup/totp": {
      "post": {
        "description": "Initialize TOTP (Time-based One-Time Password) MFA setup",
        "operationId": "MfaController_setupTotp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupTotpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TOTP setup initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "email",
                        "totp",
                        "backup_codes"
                      ]
                    },
                    "secret": {
                      "type": "string"
                    },
                    "qrCodeUrl": {
                      "type": "string"
                    },
                    "setupId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Setup TOTP MFA",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/setup/sms": {
      "post": {
        "description": "Initialize SMS-based MFA setup",
        "operationId": "MfaController_setupSms",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupSmsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMS MFA setup initiated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Setup SMS MFA",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/setup/verify": {
      "post": {
        "description": "Verify and activate a pending MFA method setup",
        "operationId": "MfaController_verifySetup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySetupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA setup verified and activated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Verify MFA setup",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/backup-codes/generate": {
      "post": {
        "description": "Generate new backup recovery codes for MFA",
        "operationId": "MfaController_generateBackupCodes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Backup codes generated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate backup codes",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/verify/start": {
      "post": {
        "description": "Initiate MFA verification process for login or sensitive actions",
        "operationId": "MfaController_startVerification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA verification started successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Start MFA verification",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/verify/code": {
      "post": {
        "description": "Verify the MFA code provided by the user",
        "operationId": "MfaController_verifyCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA code verified successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Verify MFA code",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/{methodId}/primary": {
      "put": {
        "description": "Set a specific MFA method as the primary method",
        "operationId": "MfaController_setPrimaryMethod",
        "parameters": [
          {
            "name": "methodId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Primary MFA method updated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Set primary MFA method",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/{method}": {
      "delete": {
        "description": "Disable a specific MFA method for the user",
        "operationId": "MfaController_disableMfaMethod",
        "parameters": [],
        "responses": {
          "200": {
            "description": "MFA method disabled successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Disable MFA method",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/auth/mfa/recovery/status": {
      "get": {
        "description": "Check the status of MFA recovery options",
        "operationId": "MfaController_getRecoveryStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "MFA recovery status retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get MFA recovery status",
        "tags": [
          "Multi-Factor Authentication"
        ]
      }
    },
    "/api/v1/trains": {
      "get": {
        "operationId": "TrainsController_findAllTrains",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all trains.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Train"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all trains",
        "tags": [
          "trains"
        ]
      },
      "post": {
        "operationId": "TrainsController_createTrain",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The train has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Train"
                }
              }
            }
          }
        },
        "summary": "Create a new train",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/stations": {
      "get": {
        "operationId": "TrainsController_findAllStationsPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by station status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "maintenance"
              ]
            }
          },
          {
            "name": "province",
            "required": false,
            "in": "query",
            "description": "Filter by province",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by station name or code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return paginated stations with metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationListResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all stations with pagination and filtering",
        "tags": [
          "trains"
        ]
      },
      "post": {
        "operationId": "TrainsController_createStation",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The station has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Station"
                }
              }
            }
          }
        },
        "summary": "Create a new station",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/stations/simple": {
      "get": {
        "operationId": "TrainsController_findAllStations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all stations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all stations (simple list, no pagination)",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/routes": {
      "get": {
        "operationId": "TrainsController_findAllRoutes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all train routes."
          }
        },
        "summary": "Get all train routes",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/schedules": {
      "get": {
        "operationId": "TrainsController_findTrainSchedules",
        "parameters": [
          {
            "name": "origin",
            "required": true,
            "in": "query",
            "description": "Origin station ID or station name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "required": true,
            "in": "query",
            "description": "Destination station ID or station name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Travel date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return matching schedules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainSchedule"
                  }
                }
              }
            }
          }
        },
        "summary": "Search train schedules",
        "tags": [
          "trains"
        ]
      },
      "post": {
        "operationId": "TrainsController_createTrainSchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Train schedule creation data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trainId": {
                    "type": "string",
                    "description": "Train ID"
                  },
                  "routeId": {
                    "type": "string",
                    "description": "Route ID"
                  },
                  "scheduleDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Schedule date (YYYY-MM-DD)"
                  },
                  "departureTime": {
                    "type": "string",
                    "description": "Departure time (HH:mm:ss)"
                  },
                  "arrivalTime": {
                    "type": "string",
                    "description": "Arrival time (HH:mm:ss)"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "scheduled",
                      "running",
                      "delayed",
                      "cancelled",
                      "completed"
                    ],
                    "default": "scheduled"
                  },
                  "platformNumber": {
                    "type": "string",
                    "description": "Platform number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  }
                },
                "required": [
                  "trainId",
                  "routeId",
                  "scheduleDate",
                  "departureTime",
                  "arrivalTime"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Train schedule created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainSchedule"
                }
              }
            }
          }
        },
        "summary": "Create a new train schedule",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/schedules/all": {
      "get": {
        "operationId": "TrainsController_findAllTrainSchedules",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trainId",
            "required": false,
            "in": "query",
            "description": "Filter by train ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routeId",
            "required": false,
            "in": "query",
            "description": "Filter by route ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Filter from date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Filter to date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return paginated train schedules."
          }
        },
        "summary": "Get all train schedules with pagination",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/schedules/{id}": {
      "get": {
        "operationId": "TrainsController_findTrainScheduleById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Train schedule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return train schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainSchedule"
                }
              }
            }
          }
        },
        "summary": "Get a train schedule by ID",
        "tags": [
          "trains"
        ]
      },
      "put": {
        "operationId": "TrainsController_updateTrainSchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Train schedule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Train schedule update data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trainId": {
                    "type": "string",
                    "description": "Train ID"
                  },
                  "routeId": {
                    "type": "string",
                    "description": "Route ID"
                  },
                  "scheduleDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Schedule date (YYYY-MM-DD)"
                  },
                  "departureTime": {
                    "type": "string",
                    "description": "Departure time (HH:mm:ss)"
                  },
                  "arrivalTime": {
                    "type": "string",
                    "description": "Arrival time (HH:mm:ss)"
                  },
                  "actualDepartureTime": {
                    "type": "string",
                    "description": "Actual departure time (HH:mm:ss)"
                  },
                  "actualArrivalTime": {
                    "type": "string",
                    "description": "Actual arrival time (HH:mm:ss)"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "scheduled",
                      "running",
                      "delayed",
                      "cancelled",
                      "completed"
                    ]
                  },
                  "delayMinutes": {
                    "type": "number",
                    "description": "Delay in minutes"
                  },
                  "platformNumber": {
                    "type": "string",
                    "description": "Platform number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  },
                  "cancellationReason": {
                    "type": "string",
                    "description": "Reason for cancellation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Train schedule updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainSchedule"
                }
              }
            }
          }
        },
        "summary": "Update a train schedule",
        "tags": [
          "trains"
        ]
      },
      "delete": {
        "operationId": "TrainsController_deleteTrainSchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Train schedule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Train schedule deleted successfully."
          }
        },
        "summary": "Delete a train schedule",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/schedules/{scheduleId}/tickets": {
      "get": {
        "operationId": "TrainsController_findTicketsBySchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return tickets for the schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          }
        },
        "summary": "Get tickets for a schedule",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/trains/{id}": {
      "patch": {
        "operationId": "TrainsController_updateTrain",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The train has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Train"
                }
              }
            }
          }
        },
        "summary": "Update a train",
        "tags": [
          "trains"
        ]
      },
      "delete": {
        "operationId": "TrainsController_deleteTrain",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The train has been successfully deleted."
          }
        },
        "summary": "Delete a train",
        "tags": [
          "trains"
        ]
      }
    },
    "/api/v1/vnticket/verify": {
      "post": {
        "description": "Parse and validate a VNTicket QR code to verify ticket authenticity",
        "operationId": "VnticketController_verifyTicket",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyTicketDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket verification result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketVerificationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid QR code or verification failed"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Verify train ticket from QR code",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/verify-bulk": {
      "post": {
        "description": "Bulk verification of multiple VNTicket QR codes",
        "operationId": "VnticketController_bulkVerifyTickets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkVerifyTicketsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk verification results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkVerificationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or verification failed"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Verify multiple tickets at once",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/verification/{id}": {
      "get": {
        "description": "Retrieve details of a specific ticket verification",
        "operationId": "VnticketController_getVerification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket verification details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketVerificationResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Verification not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get ticket verification details",
        "tags": [
          "VNTicket Integration"
        ]
      },
      "patch": {
        "description": "Update verification status or details (admin only)",
        "operationId": "VnticketController_updateVerification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketVerificationResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Verification not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update ticket verification",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/my-verifications": {
      "get": {
        "description": "Retrieve all ticket verifications for the current user",
        "operationId": "VnticketController_getUserVerifications",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by verification status",
            "schema": {
              "enum": [
                "pending",
                "verified",
                "failed",
                "expired"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User ticket verifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketVerificationResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user ticket verifications",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/ticket-info": {
      "post": {
        "description": "Get detailed information about a ticket by ticket number",
        "operationId": "VnticketController_getTicketInfo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTicketInfoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInfoResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get ticket information",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/stats": {
      "get": {
        "description": "Get statistics about ticket verifications",
        "operationId": "VnticketController_getStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Verification statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total verifications"
                    },
                    "verified": {
                      "type": "number",
                      "description": "Successfully verified"
                    },
                    "failed": {
                      "type": "number",
                      "description": "Failed verifications"
                    },
                    "expired": {
                      "type": "number",
                      "description": "Expired verifications"
                    },
                    "validForOrdering": {
                      "type": "number",
                      "description": "Valid for ordering"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get verification statistics",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/admin/stats": {
      "get": {
        "description": "Get global statistics about all ticket verifications",
        "operationId": "VnticketController_getGlobalStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Global verification statistics"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get global verification statistics (admin only)",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/admin/cleanup-expired": {
      "post": {
        "description": "Mark expired ticket verifications as expired",
        "operationId": "VnticketController_cleanupExpired",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cleanup completed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Cleanup expired verifications (admin only)",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/health/api": {
      "get": {
        "description": "Check if the VNTicket API integration is working properly",
        "operationId": "VnticketController_checkApiHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "healthy": {
                      "type": "boolean"
                    },
                    "error": {
                      "type": "string"
                    },
                    "responseTime": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Check VNTicket API health",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/parse-qr": {
      "post": {
        "description": "Parse Vietnamese train ticket QR code and automatically create user account",
        "operationId": "VnticketController_parseQRTicket",
        "parameters": [],
        "responses": {
          "200": {
            "description": "QR ticket parsed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "ticketNumber": {
                          "type": "string"
                        },
                        "trainCode": {
                          "type": "string"
                        },
                        "passengerName": {
                          "type": "string"
                        },
                        "travelDate": {
                          "type": "string"
                        },
                        "fromStation": {
                          "type": "string"
                        },
                        "toStation": {
                          "type": "string"
                        },
                        "carNumber": {
                          "type": "string"
                        },
                        "seatNumber": {
                          "type": "string"
                        }
                      }
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "fullName": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "isNewUser": {
                          "type": "boolean"
                        },
                        "needsOtp": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid QR code format"
          }
        },
        "summary": "Parse QR ticket and create user account",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/complete-qr-registration": {
      "post": {
        "description": "Complete registration process for QR-created accounts with OTP verification",
        "operationId": "VnticketController_completeQRRegistration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Registration completed successfully"
          },
          "400": {
            "description": "Invalid user ID or phone"
          }
        },
        "summary": "Complete QR-based registration",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/verify-qr-otp": {
      "post": {
        "description": "Verify OTP for QR-based registration and activate account",
        "operationId": "VnticketController_verifyQROtp",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OTP verified and account activated"
          },
          "400": {
            "description": "Invalid OTP or user"
          }
        },
        "summary": "Verify QR registration OTP",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vnticket/validate-qr-format": {
      "post": {
        "description": "Validate if a QR code string follows the VNTicket format (public endpoint for testing)",
        "operationId": "VnticketController_validateQrFormat",
        "parameters": [],
        "responses": {
          "200": {
            "description": "QR format validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate QR code format",
        "tags": [
          "VNTicket Integration"
        ]
      }
    },
    "/api/v1/vendors": {
      "get": {
        "operationId": "VendorsController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by vendor status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by vendor type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by business name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all vendors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vendor"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all vendors",
        "tags": [
          "vendors"
        ]
      },
      "post": {
        "operationId": "VendorsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVendorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The vendor has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          }
        },
        "summary": "Create a new vendor",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/vendors/{id}": {
      "get": {
        "operationId": "VendorsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a vendor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "summary": "Get a vendor by id",
        "tags": [
          "vendors"
        ]
      },
      "patch": {
        "operationId": "VendorsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The vendor has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "summary": "Update a vendor",
        "tags": [
          "vendors"
        ]
      },
      "delete": {
        "operationId": "VendorsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The vendor has been successfully deleted."
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "summary": "Delete a vendor",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/vendors/{id}/locations": {
      "get": {
        "operationId": "VendorsController_findVendorLocations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return vendor locations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorLocation"
                  }
                }
              }
            }
          }
        },
        "summary": "Get vendor locations",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/vendors/{id}/contracts": {
      "get": {
        "operationId": "VendorsController_findVendorContracts",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return vendor contracts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorContract"
                  }
                }
              }
            }
          }
        },
        "summary": "Get vendor contracts",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/vendors/{id}/payout-settings": {
      "get": {
        "operationId": "VendorsController_findVendorPayoutSettings",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return vendor payout settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorPayoutSetting"
                  }
                }
              }
            }
          }
        },
        "summary": "Get vendor payout settings",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/vendors/{id}/status": {
      "patch": {
        "operationId": "VendorsController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorStatusUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "summary": "Update vendor status",
        "tags": [
          "vendors"
        ]
      }
    },
    "/api/v1/products": {
      "get": {
        "operationId": "ProductsController_findAll",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendor",
            "required": false,
            "in": "query",
            "description": "Filter by vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withCount",
            "required": false,
            "in": "query",
            "description": "Include total count (0=no, 1=yes)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts from 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return paginated products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number",
                          "description": "Only included when withCount=1"
                        },
                        "filter": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all products",
        "tags": [
          "products"
        ]
      },
      "post": {
        "operationId": "ProductsController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The product has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "summary": "Create a new product",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/available": {
      "get": {
        "description": "Ultra-simple product discovery: finds train vendor products and upcoming station products",
        "operationId": "ProductsController_discoverProducts",
        "parameters": [
          {
            "name": "trainCode",
            "required": true,
            "in": "query",
            "description": "Train code to find on-train products",
            "schema": {
              "example": "SE1",
              "type": "string"
            }
          },
          {
            "name": "upcomingStations",
            "required": false,
            "in": "query",
            "description": "Array of upcoming station IDs for station products",
            "schema": {
              "example": [
                "HNO",
                "SGO"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by product category ID",
            "schema": {
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
              "type": "string"
            }
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query for product names and descriptions",
            "schema": {
              "example": "coffee",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products discovered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDiscoveryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          }
        },
        "summary": "Discover available products from train and station vendors",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/categories": {
      "get": {
        "operationId": "ProductsController_findCategories",
        "parameters": [
          {
            "name": "withCount",
            "required": false,
            "in": "query",
            "description": "Include total count (0=no, 1=yes)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts from 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return paginated categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductCategory"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number",
                          "description": "Only included when withCount=1"
                        },
                        "filter": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all product categories",
        "tags": [
          "products"
        ]
      },
      "post": {
        "operationId": "ProductsController_createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The category has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategory"
                }
              }
            }
          }
        },
        "summary": "Create a new product category",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "operationId": "ProductsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found."
          }
        },
        "summary": "Get a product by id",
        "tags": [
          "products"
        ]
      },
      "patch": {
        "operationId": "ProductsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Product data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The product has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found."
          }
        },
        "summary": "Update a product",
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "ProductsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The product has been successfully deleted."
          },
          "404": {
            "description": "Product not found."
          }
        },
        "summary": "Delete a product",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/categories/{id}": {
      "delete": {
        "operationId": "ProductsController_deleteCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The category has been successfully deleted."
          },
          "400": {
            "description": "Cannot delete category with subcategories or products."
          },
          "404": {
            "description": "Category not found."
          }
        },
        "summary": "Delete a product category",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/{id}/images": {
      "post": {
        "operationId": "ProductsController_addImage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The image has been successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductImage"
                }
              }
            }
          }
        },
        "summary": "Add image to product",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/{id}/variants": {
      "post": {
        "operationId": "ProductsController_addVariant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The variant has been successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariant"
                }
              }
            }
          }
        },
        "summary": "Add variant to product",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/{id}/inventory": {
      "patch": {
        "operationId": "ProductsController_updateInventory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Inventory data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryDto"
              },
              "examples": {
                "initialize": {
                  "summary": "Initialize new inventory",
                  "description": "Example of initializing inventory for a product",
                  "value": {
                    "currentStock": 100,
                    "minStockLevel": 10,
                    "maxStockLevel": 500,
                    "unitPrice": 25.99,
                    "reorderPoint": 15,
                    "location": "Main Warehouse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The inventory has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInventoryDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update product inventory",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/realtime": {
      "get": {
        "description": "Get real-time stock levels across all products and locations",
        "operationId": "ProductsController_getRealtimeInventory",
        "parameters": [
          {
            "name": "vendorId",
            "required": false,
            "in": "query",
            "description": "Filter by vendor",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location/station",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lowStockOnly",
            "required": false,
            "in": "query",
            "description": "Show only low stock items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "outOfStockOnly",
            "required": false,
            "in": "query",
            "description": "Show only out of stock items",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time inventory data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "inventories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "string"
                          },
                          "productName": {
                            "type": "string"
                          },
                          "currentStock": {
                            "type": "number"
                          },
                          "reservedStock": {
                            "type": "number"
                          },
                          "availableStock": {
                            "type": "number"
                          },
                          "reorderLevel": {
                            "type": "number"
                          },
                          "maxStock": {
                            "type": "number"
                          },
                          "lastUpdated": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "in_stock",
                              "low_stock",
                              "out_of_stock",
                              "discontinued"
                            ]
                          },
                          "location": {
                            "type": "string"
                          },
                          "vendor": {
                            "type": "string"
                          },
                          "vendorId": {
                            "type": "string"
                          },
                          "vendorName": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "correlationId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get real-time inventory levels (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/alerts/subscribe": {
      "post": {
        "description": "Subscribe to low stock and out of stock notifications",
        "operationId": "ProductsController_subscribeToInventoryAlerts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully subscribed to inventory alerts"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Subscribe to inventory alerts (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/bulk-update": {
      "put": {
        "description": "Update inventory levels for multiple products at once",
        "operationId": "ProductsController_bulkUpdateInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk inventory update completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "updated": {
                      "type": "number"
                    },
                    "failed": {
                      "type": "number"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "string"
                          },
                          "success": {
                            "type": "boolean"
                          },
                          "error": {
                            "type": "string"
                          },
                          "previousStock": {
                            "type": "number"
                          },
                          "newStock": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Bulk update inventory (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/{productId}/history": {
      "get": {
        "description": "Get detailed history of stock movements for a product",
        "operationId": "ProductsController_getInventoryHistory",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID to get history for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Movement type filter",
            "schema": {
              "enum": [
                "purchase",
                "sale",
                "adjustment",
                "return",
                "transfer"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "movements": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "purchase",
                              "sale",
                              "adjustment",
                              "return",
                              "transfer",
                              "expired",
                              "damaged"
                            ]
                          },
                          "quantity": {
                            "type": "number"
                          },
                          "previousStock": {
                            "type": "number"
                          },
                          "newStock": {
                            "type": "number"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          },
                          "performedBy": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "relatedOrderId": {
                            "type": "string"
                          },
                          "batchNumber": {
                            "type": "string"
                          },
                          "expiryDate": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "totalMovements": {
                          "type": "number"
                        },
                        "totalInbound": {
                          "type": "number"
                        },
                        "totalOutbound": {
                          "type": "number"
                        },
                        "netChange": {
                          "type": "number"
                        },
                        "periodStart": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "periodEnd": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get inventory movement history (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/reorder/automated": {
      "post": {
        "description": "Generate reorder suggestions based on sales patterns and current stock levels",
        "operationId": "ProductsController_generateReorderSuggestions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Reorder suggestions generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "suggestions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "string"
                          },
                          "productName": {
                            "type": "string"
                          },
                          "currentStock": {
                            "type": "number"
                          },
                          "suggestedOrderQuantity": {
                            "type": "number"
                          },
                          "priority": {
                            "type": "string",
                            "enum": [
                              "low",
                              "medium",
                              "high",
                              "urgent"
                            ]
                          },
                          "estimatedStockoutDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "averageDailySales": {
                            "type": "number"
                          },
                          "leadTime": {
                            "type": "number"
                          },
                          "lastOrderDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "supplier": {
                            "type": "string"
                          },
                          "estimatedCost": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "totalSuggestions": {
                          "type": "number"
                        },
                        "urgentItems": {
                          "type": "number"
                        },
                        "estimatedTotalCost": {
                          "type": "number"
                        },
                        "potentialStockouts": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate automated reorder suggestions (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/adjust": {
      "post": {
        "description": "Manually adjust inventory levels with detailed reasoning and audit trail",
        "operationId": "ProductsController_adjustInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Inventory adjustment data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "productId",
                  "adjustmentType",
                  "quantity",
                  "reason"
                ],
                "properties": {
                  "productId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Product ID to adjust"
                  },
                  "locationId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Location ID (optional)"
                  },
                  "adjustmentType": {
                    "type": "string",
                    "enum": [
                      "increase",
                      "decrease",
                      "set_absolute"
                    ],
                    "description": "Type of adjustment"
                  },
                  "quantity": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Quantity to adjust"
                  },
                  "reason": {
                    "type": "string",
                    "enum": [
                      "damaged",
                      "expired",
                      "theft",
                      "count_correction",
                      "return",
                      "gift",
                      "sample",
                      "other"
                    ],
                    "description": "Reason for adjustment"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes (optional)"
                  },
                  "batchNumber": {
                    "type": "string",
                    "description": "Batch number (optional)"
                  },
                  "expiryDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Expiry date (optional)"
                  },
                  "photoEvidence": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Photo evidence URLs (optional)"
                  },
                  "approvalRequired": {
                    "type": "boolean",
                    "description": "Whether approval is required (optional)"
                  }
                }
              },
              "examples": {
                "increase": {
                  "summary": "Increase stock",
                  "description": "Example of increasing stock due to count correction",
                  "value": {
                    "productId": "a9f9c5fc-13af-438f-a70a-d6195399da68",
                    "adjustmentType": "increase",
                    "quantity": 20,
                    "reason": "count_correction",
                    "notes": "Manual inventory adjustment from backoffice"
                  }
                },
                "decrease": {
                  "summary": "Decrease stock",
                  "description": "Example of decreasing stock due to damage",
                  "value": {
                    "productId": "a9f9c5fc-13af-438f-a70a-d6195399da68",
                    "adjustmentType": "decrease",
                    "quantity": 5,
                    "reason": "damaged",
                    "notes": "Items damaged during transport"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory adjusted successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Adjust inventory with reason (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/analytics": {
      "get": {
        "description": "Get comprehensive inventory analytics and insights",
        "operationId": "ProductsController_getInventoryAnalytics",
        "parameters": [
          {
            "name": "vendorId",
            "required": false,
            "in": "query",
            "description": "Filter by vendor",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {
              "enum": [
                "7d",
                "30d",
                "90d",
                "1y"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "turnoverRates": {
                      "type": "object",
                      "properties": {
                        "overall": {
                          "type": "number"
                        },
                        "byCategory": {
                          "type": "array"
                        },
                        "byProduct": {
                          "type": "array"
                        }
                      }
                    },
                    "stockLevels": {
                      "type": "object",
                      "properties": {
                        "averageStockValue": {
                          "type": "number"
                        },
                        "stockoutEvents": {
                          "type": "number"
                        },
                        "overstockItems": {
                          "type": "number"
                        },
                        "deadStock": {
                          "type": "array"
                        }
                      }
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "fillRate": {
                          "type": "number"
                        },
                        "stockAccuracy": {
                          "type": "number"
                        },
                        "wastePercentage": {
                          "type": "number"
                        },
                        "carryingCosts": {
                          "type": "number"
                        }
                      }
                    },
                    "trends": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date"
                          },
                          "stockValue": {
                            "type": "number"
                          },
                          "turnoverRate": {
                            "type": "number"
                          },
                          "stockoutEvents": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get inventory analytics (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/forecasting/{productId}": {
      "get": {
        "description": "Get AI-powered demand forecasting for inventory planning",
        "operationId": "ProductsController_getDemandForecast",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID for forecasting",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSeasonality",
            "required": false,
            "in": "query",
            "description": "Include seasonal patterns",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "horizon",
            "required": false,
            "in": "query",
            "description": "Forecast horizon",
            "schema": {
              "enum": [
                "7d",
                "30d",
                "90d"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demand forecast generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "forecast": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date"
                          },
                          "predictedDemand": {
                            "type": "number"
                          },
                          "confidence": {
                            "type": "number"
                          },
                          "factors": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "recommendations": {
                      "type": "object",
                      "properties": {
                        "optimalStock": {
                          "type": "number"
                        },
                        "reorderPoint": {
                          "type": "number"
                        },
                        "safetyStock": {
                          "type": "number"
                        },
                        "orderQuantity": {
                          "type": "number"
                        }
                      }
                    },
                    "modelAccuracy": {
                      "type": "object",
                      "properties": {
                        "mape": {
                          "type": "number"
                        },
                        "accuracy": {
                          "type": "number"
                        },
                        "lastTraining": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get demand forecasting for product (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/transfer": {
      "post": {
        "description": "Transfer stock between different locations/stations",
        "operationId": "ProductsController_transferInventory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Inventory transfer initiated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Transfer inventory between locations (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/products/inventory/alerts/active": {
      "get": {
        "description": "Get all active inventory alerts and warnings",
        "operationId": "ProductsController_getActiveInventoryAlerts",
        "parameters": [
          {
            "name": "severity",
            "required": false,
            "in": "query",
            "description": "Filter by severity",
            "schema": {
              "enum": [
                "low",
                "medium",
                "high",
                "critical"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by alert type",
            "schema": {
              "enum": [
                "low_stock",
                "out_of_stock",
                "overstock",
                "expired",
                "damaged"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active inventory alerts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alerts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "severity": {
                            "type": "string"
                          },
                          "productId": {
                            "type": "string"
                          },
                          "productName": {
                            "type": "string"
                          },
                          "currentStock": {
                            "type": "number"
                          },
                          "threshold": {
                            "type": "number"
                          },
                          "message": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "acknowledged": {
                            "type": "boolean"
                          },
                          "actionRequired": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "totalAlerts": {
                          "type": "number"
                        },
                        "criticalAlerts": {
                          "type": "number"
                        },
                        "unacknowledged": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get active inventory alerts (UC2.4)",
        "tags": [
          "products"
        ]
      }
    },
    "/api/v1/orders": {
      "post": {
        "operationId": "OrdersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully"
          },
          "400": {
            "description": "Invalid order data"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new order",
        "tags": [
          "orders"
        ]
      },
      "get": {
        "operationId": "OrdersController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "confirmed",
                "paid",
                "in_preparation",
                "ready",
                "in_delivery",
                "delivered",
                "completed",
                "cancelled",
                "refunded",
                "failed"
              ]
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID (admin only)",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "orderNumber",
            "required": false,
            "in": "query",
            "description": "Search by order number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorId",
            "required": false,
            "in": "query",
            "description": "Filter by vendor ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for date range filter (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for date range filter (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all orders with filtering and pagination",
        "tags": [
          "orders"
        ]
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "operationId": "OrdersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get order by ID",
        "tags": [
          "orders"
        ]
      },
      "patch": {
        "operationId": "OrdersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update order",
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "operationId": "OrdersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Cancel order",
        "tags": [
          "orders"
        ]
      }
    },
    "/api/v1/orders/{id}/confirm": {
      "post": {
        "operationId": "OrdersController_confirmOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order confirmed successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Confirm order",
        "tags": [
          "orders"
        ]
      }
    },
    "/api/v1/orders/{id}/prepare": {
      "post": {
        "operationId": "OrdersController_startPreparation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order preparation started"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Start order preparation",
        "tags": [
          "orders"
        ]
      }
    },
    "/api/v1/orders/{id}/ready": {
      "post": {
        "operationId": "OrdersController_markAsReady",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order marked as ready"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Mark order as ready for pickup",
        "tags": [
          "orders"
        ]
      }
    },
    "/api/v1/notifications": {
      "get": {
        "description": "Get paginated list of notifications for the current user",
        "operationId": "NotificationsController_getNotifications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "withCount",
            "required": false,
            "in": "query",
            "description": "Include total count (0=no, 1=yes)",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "number"
            }
          },
          {
            "name": "read",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of notifications"
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total count (only when withCount=1)"
                        },
                        "page": {
                          "type": "number",
                          "description": "Current page number"
                        },
                        "pageSize": {
                          "type": "number",
                          "description": "Number of items per page"
                        },
                        "filter": {
                          "type": "object",
                          "description": "Applied filters"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user notifications",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/stats": {
      "get": {
        "description": "Get notification statistics for the current user",
        "operationId": "NotificationsController_getNotificationStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get notification statistics",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/{id}/read": {
      "put": {
        "description": "Mark a specific notification as read",
        "operationId": "NotificationsController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Mark notification as read",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/read-all": {
      "put": {
        "description": "Mark all unread notifications as read for the current user",
        "operationId": "NotificationsController_markAllAsRead",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Mark all notifications as read",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/{id}": {
      "delete": {
        "description": "Delete a specific notification",
        "operationId": "NotificationsController_deleteNotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/push-token": {
      "post": {
        "description": "Register a push notification token for the current user",
        "operationId": "NotificationsController_registerPushToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPushTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Push token registered successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Register push notification token",
        "tags": [
          "Notifications"
        ]
      },
      "delete": {
        "description": "Unregister a push notification token",
        "operationId": "NotificationsController_unregisterPushToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Push token unregistered successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Unregister push notification token",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/send": {
      "post": {
        "description": "Send notification to multiple users",
        "operationId": "NotificationsController_sendBulkNotification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications sent successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Send bulk notification (Admin only)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/test-push": {
      "post": {
        "description": "Send a test push notification",
        "operationId": "NotificationsController_testPushNotification",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test notification sent"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Test push notification (Admin only)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/cleanup": {
      "delete": {
        "description": "Remove expired notifications from the system",
        "operationId": "NotificationsController_cleanupExpiredNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cleanup completed"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Cleanup expired notifications (Super Admin only)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/stream/orders/{orderId}": {
      "get": {
        "description": "Real-time order status updates via Server-Sent Events for order tracking",
        "operationId": "NotificationsController_streamOrderUpdates",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time order updates stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: {\"orderId\":\"order123\",\"status\":\"preparing\",\"timestamp\":\"2025-01-15T10:30:00Z\"}\n\n"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Live order tracking stream (UC1.4)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/stream/delivery/{deliveryId}": {
      "get": {
        "description": "Real-time delivery status updates for train/station staff",
        "operationId": "NotificationsController_streamDeliveryUpdates",
        "parameters": [
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time delivery updates stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: {\"deliveryId\":\"del123\",\"status\":\"in_transit\",\"location\":\"Car 5, Seat 12A\",\"timestamp\":\"2025-01-15T10:35:00Z\"}\n\n"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Live delivery tracking stream (UC2.7)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/subscribe/order-updates": {
      "post": {
        "description": "Subscribe to push notifications for order status changes",
        "operationId": "NotificationsController_subscribeToOrderUpdates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully subscribed to order notifications"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Subscribe to order update notifications (UC1.4)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/delivery/{deliveryId}/confirm-qr": {
      "post": {
        "description": "Confirm order delivery using QR code scan with real-time updates",
        "operationId": "NotificationsController_confirmDeliveryWithQR",
        "parameters": [
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery confirmed successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Confirm delivery with QR code (UC2.7)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/stream/live": {
      "get": {
        "description": "Real-time notifications stream for the current user",
        "operationId": "NotificationsController_streamLiveNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Real-time notifications stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: {\"id\":\"notif123\",\"type\":\"order_update\",\"title\":\"Order Status Update\",\"message\":\"Your order is being prepared\",\"timestamp\":\"2025-01-15T10:40:00Z\"}\n\n"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Live notifications stream (UC1.4)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/delivery/bulk-notify": {
      "post": {
        "description": "Send notifications to multiple staff members about delivery assignments",
        "operationId": "NotificationsController_sendBulkDeliveryNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bulk delivery notifications sent"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Send bulk delivery notifications (UC2.7)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/activity-feed": {
      "get": {
        "description": "Get recent activity feed with order and delivery updates",
        "operationId": "NotificationsController_getActivityFeed",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of activities to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "types",
            "required": false,
            "in": "query",
            "description": "Activity types to include",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity feed retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get real-time activity feed",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/emergency/broadcast": {
      "post": {
        "description": "Send emergency notification to all active users or specific user groups",
        "operationId": "NotificationsController_sendEmergencyBroadcast",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Emergency broadcast sent"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Send emergency broadcast notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/payments": {
      "post": {
        "operationId": "PaymentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payment data"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new payment",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/{transactionId}": {
      "get": {
        "operationId": "PaymentsController_getPaymentStatus",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Payment transaction ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get payment status",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/{transactionId}/refresh": {
      "patch": {
        "operationId": "PaymentsController_refreshPaymentStatus",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Payment transaction ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Refresh payment status from gateway",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/{transactionId}/refund": {
      "post": {
        "operationId": "PaymentsController_processRefund",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Payment transaction ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refundAmount": {
                    "type": "string",
                    "description": "Amount to refund (optional, full amount if not specified)"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for refund"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund processed successfully"
          },
          "400": {
            "description": "Cannot refund payment"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Process payment refund",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/config/gateways": {
      "get": {
        "operationId": "PaymentsController_getPaymentGateways",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payment gateways configuration"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get available payment gateways",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/qr-code/generate": {
      "post": {
        "operationId": "PaymentsController_generateQRCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentMethod": {
                    "type": "string",
                    "enum": [
                      "vnpay",
                      "zalopay",
                      "momo",
                      "viettel_money",
                      "bank_transfer",
                      "bank_card",
                      "credit_card",
                      "debit_card",
                      "qr_banking",
                      "qr_code",
                      "cash"
                    ],
                    "description": "Payment method for QR code"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order ID"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Payment amount"
                  },
                  "description": {
                    "type": "string",
                    "description": "Payment description"
                  },
                  "size": {
                    "type": "number",
                    "description": "QR code size in pixels",
                    "default": 256
                  }
                },
                "required": [
                  "paymentMethod",
                  "orderId",
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "QR code generated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate QR code for payment",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/webhooks/vnpay": {
      "post": {
        "operationId": "PaymentsController_handleVNPayWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VNPayWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookResponseDto"
                }
              }
            }
          }
        },
        "summary": "VNPay payment webhook",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/webhooks/viettel-money": {
      "post": {
        "operationId": "PaymentsController_handleViettelMoneyWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViettelMoneyWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookResponseDto"
                }
              }
            }
          }
        },
        "summary": "ViettelMoney payment webhook",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/webhooks/zalopay": {
      "post": {
        "operationId": "PaymentsController_handleZaloPayWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZaloPayWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookResponseDto"
                }
              }
            }
          }
        },
        "summary": "ZaloPay payment webhook",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/webhooks/{paymentMethod}": {
      "post": {
        "operationId": "PaymentsController_handleGenericWebhook",
        "parameters": [
          {
            "name": "paymentMethod",
            "required": true,
            "in": "path",
            "description": "Payment method",
            "schema": {
              "enum": [
                "vnpay",
                "zalopay",
                "momo",
                "viettel_money",
                "bank_transfer",
                "bank_card",
                "credit_card",
                "debit_card",
                "qr_banking",
                "qr_code",
                "cash"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookResponseDto"
                }
              }
            }
          }
        },
        "summary": "Generic payment webhook handler",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/payments/return/{paymentMethod}": {
      "get": {
        "operationId": "PaymentsController_handlePaymentReturn",
        "parameters": [
          {
            "name": "paymentMethod",
            "required": true,
            "in": "path",
            "description": "Payment method",
            "schema": {
              "enum": [
                "vnpay",
                "zalopay",
                "momo",
                "viettel_money",
                "bank_transfer",
                "bank_card",
                "credit_card",
                "debit_card",
                "qr_banking",
                "qr_code",
                "cash"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment return processed"
          }
        },
        "summary": "Payment return URL handler",
        "tags": [
          "payments"
        ]
      }
    },
    "/api/v1/delivery": {
      "post": {
        "operationId": "DeliveryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliveryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The delivery has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          }
        },
        "summary": "Create a new delivery",
        "tags": [
          "delivery"
        ]
      },
      "get": {
        "operationId": "DeliveryController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by delivery status",
            "schema": {
              "enum": [
                "pending",
                "ready_for_pickup",
                "assigned",
                "picked_up",
                "in_transit",
                "delivered",
                "failed",
                "cancelled"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all deliveries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Delivery"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all deliveries",
        "tags": [
          "delivery"
        ]
      }
    },
    "/api/v1/delivery/track/{trackingNumber}": {
      "get": {
        "operationId": "DeliveryController_trackDelivery",
        "parameters": [
          {
            "name": "trackingNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return delivery details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found."
          }
        },
        "summary": "Track delivery by tracking number",
        "tags": [
          "delivery"
        ]
      }
    },
    "/api/v1/delivery/order/{orderId}": {
      "get": {
        "operationId": "DeliveryController_findByOrderId",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return delivery for the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found."
          }
        },
        "summary": "Get delivery by order ID",
        "tags": [
          "delivery"
        ]
      }
    },
    "/api/v1/delivery/{id}": {
      "get": {
        "operationId": "DeliveryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found."
          }
        },
        "summary": "Get a delivery by ID",
        "tags": [
          "delivery"
        ]
      },
      "patch": {
        "operationId": "DeliveryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliveryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The delivery has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found."
          }
        },
        "summary": "Update a delivery",
        "tags": [
          "delivery"
        ]
      },
      "delete": {
        "operationId": "DeliveryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery has been successfully deleted."
          },
          "404": {
            "description": "Delivery not found."
          }
        },
        "summary": "Delete a delivery",
        "tags": [
          "delivery"
        ]
      }
    },
    "/api/v1/support": {
      "post": {
        "operationId": "SupportController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupportTicketDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The ticket has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicket"
                }
              }
            }
          }
        },
        "summary": "Create a new support ticket",
        "tags": [
          "support"
        ]
      },
      "get": {
        "operationId": "SupportController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "withCount",
            "required": false,
            "in": "query",
            "description": "Include total count (0=no, 1=yes)",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by ticket status",
            "schema": {
              "enum": [
                "open",
                "in_progress",
                "resolved",
                "closed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return support tickets with pagination.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SupportTicket"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total count (only when withCount=1)"
                        },
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        },
                        "filter": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all support tickets",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs": {
      "post": {
        "operationId": "SupportController_createFaq",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFaqDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The FAQ has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faq"
                }
              }
            }
          }
        },
        "summary": "Create a new FAQ",
        "tags": [
          "support"
        ]
      },
      "get": {
        "operationId": "SupportController_findAllFaqs",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query for question or answer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": [
                "general",
                "booking",
                "payment",
                "food_ordering",
                "delivery",
                "account",
                "technical"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "published",
                "archived"
              ]
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filter by tags (comma-separated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "sortOrder",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "ASC",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return paginated FAQs."
          }
        },
        "summary": "Get all FAQs with filtering and pagination",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/published": {
      "get": {
        "operationId": "SupportController_findPublishedFaqs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return published FAQs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Faq"
                  }
                }
              }
            }
          }
        },
        "summary": "Get published FAQs only",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/categories": {
      "get": {
        "operationId": "SupportController_getFaqCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return FAQ categories with counts."
          }
        },
        "summary": "Get FAQ categories with counts",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/search/{searchTerm}": {
      "get": {
        "operationId": "SupportController_searchFaqs",
        "parameters": [
          {
            "name": "searchTerm",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return matching FAQs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Faq"
                  }
                }
              }
            }
          }
        },
        "summary": "Search FAQs by term",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/category/{category}": {
      "get": {
        "operationId": "SupportController_findFaqsByCategory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return FAQs in category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Faq"
                  }
                }
              }
            }
          }
        },
        "summary": "Get FAQs by category",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}": {
      "get": {
        "operationId": "SupportController_findFaqById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return FAQ details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faq"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found."
          }
        },
        "summary": "Get FAQ by ID",
        "tags": [
          "support"
        ]
      },
      "patch": {
        "operationId": "SupportController_updateFaq",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFaqDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The FAQ has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faq"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found."
          }
        },
        "summary": "Update an FAQ",
        "tags": [
          "support"
        ]
      },
      "delete": {
        "operationId": "SupportController_deleteFaq",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The FAQ has been successfully deleted."
          },
          "404": {
            "description": "FAQ not found."
          }
        },
        "summary": "Delete an FAQ",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}/view": {
      "patch": {
        "operationId": "SupportController_incrementFaqViewCount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View count incremented."
          }
        },
        "summary": "Increment FAQ view count",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}/helpful": {
      "patch": {
        "operationId": "SupportController_markFaqAsHelpful",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FAQ marked as helpful."
          }
        },
        "summary": "Mark FAQ as helpful",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}/not-helpful": {
      "patch": {
        "operationId": "SupportController_markFaqAsNotHelpful",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FAQ marked as not helpful."
          }
        },
        "summary": "Mark FAQ as not helpful",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}/publish": {
      "patch": {
        "operationId": "SupportController_publishFaq",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FAQ published successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faq"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found."
          }
        },
        "summary": "Publish an FAQ",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/faqs/{id}/archive": {
      "patch": {
        "operationId": "SupportController_archiveFaq",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FAQ archived successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Faq"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found."
          }
        },
        "summary": "Archive an FAQ",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/ticket/{ticketNumber}": {
      "get": {
        "operationId": "SupportController_findByTicketNumber",
        "parameters": [
          {
            "name": "ticketNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return ticket details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicket"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found."
          }
        },
        "summary": "Get ticket by ticket number",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/user/{userId}": {
      "get": {
        "operationId": "SupportController_findByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportTicket"
                  }
                }
              }
            }
          }
        },
        "summary": "Get tickets by user ID",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/support/{id}": {
      "patch": {
        "operationId": "SupportController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSupportTicketDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ticket has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicket"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found."
          }
        },
        "summary": "Update a support ticket",
        "tags": [
          "support"
        ]
      },
      "delete": {
        "operationId": "SupportController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ticket has been successfully deleted."
          },
          "404": {
            "description": "Ticket not found."
          }
        },
        "summary": "Delete a support ticket",
        "tags": [
          "support"
        ]
      },
      "get": {
        "operationId": "SupportController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a support ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicket"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found."
          }
        },
        "summary": "Get a support ticket by ID",
        "tags": [
          "support"
        ]
      }
    },
    "/api/v1/reports": {
      "get": {
        "operationId": "ReportsController_generateReport",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "sales",
                "orders",
                "users",
                "products",
                "deliveries",
                "revenue"
              ]
            }
          },
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "default": "monthly",
              "type": "string",
              "enum": [
                "daily",
                "weekly",
                "monthly",
                "quarterly",
                "yearly"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return generated report data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "sales",
                        "orders",
                        "users",
                        "products",
                        "deliveries",
                        "revenue"
                      ]
                    },
                    "period": {
                      "type": "string",
                      "enum": [
                        "daily",
                        "weekly",
                        "monthly",
                        "quarterly",
                        "yearly"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "summary": {
                      "type": "object"
                    },
                    "generated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Generate report based on query parameters",
        "tags": [
          "reports"
        ]
      }
    },
    "/api/v1/reports/vendor/{vendorId}/revenue": {
      "get": {
        "description": "Get detailed revenue breakdown for a specific vendor",
        "operationId": "ReportsController_getVendorRevenue",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Report period",
            "schema": {
              "enum": [
                "daily",
                "weekly",
                "monthly",
                "quarterly",
                "yearly"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revenue report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vendorId": {
                      "type": "string"
                    },
                    "period": {
                      "type": "string"
                    },
                    "totalRevenue": {
                      "type": "number"
                    },
                    "totalOrders": {
                      "type": "number"
                    },
                    "averageOrderValue": {
                      "type": "number"
                    },
                    "revenueByPeriod": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          },
                          "orders": {
                            "type": "number"
                          },
                          "avgOrderValue": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "topProducts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "string"
                          },
                          "productName": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          },
                          "quantity": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get vendor revenue report",
        "tags": [
          "reports"
        ]
      }
    },
    "/api/v1/reports/vendor/{vendorId}/commission": {
      "get": {
        "description": "Get commission breakdown and tracking for a vendor",
        "operationId": "ReportsController_getVendorCommission",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Commission status filter",
            "schema": {
              "enum": [
                "pending",
                "paid",
                "disputed"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Report period",
            "schema": {
              "enum": [
                "monthly",
                "quarterly",
                "yearly"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Commission report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vendorId": {
                      "type": "string"
                    },
                    "period": {
                      "type": "string"
                    },
                    "totalCommissionEarned": {
                      "type": "number"
                    },
                    "totalCommissionPaid": {
                      "type": "number"
                    },
                    "pendingCommission": {
                      "type": "number"
                    },
                    "commissionRate": {
                      "type": "number"
                    },
                    "commissionByPeriod": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string"
                          },
                          "earned": {
                            "type": "number"
                          },
                          "paid": {
                            "type": "number"
                          },
                          "pending": {
                            "type": "number"
                          },
                          "rate": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get vendor commission report",
        "tags": [
          "reports"
        ]
      }
    },
    "/api/v1/reports/vendor/{vendorId}/payouts": {
      "get": {
        "description": "Get detailed payout history and status for a vendor",
        "operationId": "ReportsController_getVendorPayouts",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Payout status filter",
            "schema": {
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed"
              ],
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of payouts to return",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payout history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vendorId": {
                      "type": "string"
                    },
                    "totalPayouts": {
                      "type": "number"
                    },
                    "pendingAmount": {
                      "type": "number"
                    },
                    "lastPayoutDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "payouts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string"
                          },
                          "requestedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "processedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "method": {
                            "type": "string"
                          },
                          "reference": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get vendor payout history",
        "tags": [
          "reports"
        ]
      }
    },
    "/api/v1/reports/vendor/{vendorId}/financial-summary": {
      "get": {
        "description": "Get comprehensive financial overview for a vendor",
        "operationId": "ReportsController_getVendorFinancialSummary",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Summary period",
            "schema": {
              "enum": [
                "monthly",
                "quarterly",
                "yearly"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vendorId": {
                      "type": "string"
                    },
                    "period": {
                      "type": "string"
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "totalRevenue": {
                          "type": "number"
                        },
                        "totalCommission": {
                          "type": "number"
                        },
                        "totalPayouts": {
                          "type": "number"
                        },
                        "pendingPayouts": {
                          "type": "number"
                        },
                        "netEarnings": {
                          "type": "number"
                        },
                        "averageOrderValue": {
                          "type": "number"
                        },
                        "totalOrders": {
                          "type": "number"
                        },
                        "growthRate": {
                          "type": "number"
                        }
                      }
                    },
                    "monthlyTrends": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "month": {
                            "type": "string"
                          },
                          "revenue": {
                            "type": "number"
                          },
                          "commission": {
                            "type": "number"
                          },
                          "orders": {
                            "type": "number"
                          },
                          "growth": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "bestSellingProducts": {
                          "type": "array"
                        },
                        "peakSalesHours": {
                          "type": "array"
                        },
                        "customerRetention": {
                          "type": "number"
                        },
                        "averageRating": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get vendor financial summary",
        "tags": [
          "reports"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Health check endpoint",
        "tags": [
          "health"
        ]
      }
    },
    "/api/v1/health/info": {
      "get": {
        "operationId": "HealthController_getInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "database": {
                      "type": "object"
                    },
                    "application": {
                      "type": "object"
                    },
                    "statistics": {
                      "type": "object"
                    },
                    "memory": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "System information endpoint",
        "tags": [
          "health"
        ]
      }
    },
    "/api/v1/health/ping": {
      "get": {
        "operationId": "HealthController_ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ping response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Simple ping endpoint",
        "tags": [
          "health"
        ]
      }
    },
    "/api/v1/admin/system/config": {
      "get": {
        "description": "Retrieve all system configuration settings for UC3.1",
        "operationId": "AdminController_getSystemConfigurations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemConfigDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all system configurations",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/system/config/{category}": {
      "get": {
        "description": "Retrieve system configurations filtered by category",
        "operationId": "AdminController_getConfigurationsByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "description": "Configuration category",
            "schema": {
              "enum": [
                "database",
                "payment",
                "order",
                "notification",
                "security",
                "integration",
                "monitoring",
                "business"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemConfigDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get configurations by category",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/system/config/{key}": {
      "put": {
        "description": "Update a specific system configuration setting for UC3.1",
        "operationId": "AdminController_updateSystemConfiguration",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Configuration key to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfigDto"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Configuration not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update system configuration",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/system/config/bulk-update": {
      "post": {
        "description": "Update multiple system configurations at once",
        "operationId": "AdminController_bulkUpdateConfigurations",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configurations updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated": {
                      "type": "number"
                    },
                    "failed": {
                      "type": "number"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SystemConfigDto"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Bulk update system configurations",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/backup/create": {
      "post": {
        "description": "Create a full database backup for disaster recovery (UC3.3)",
        "operationId": "AdminController_createBackup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Backup created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "backupId": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "completed",
                        "failed"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create database backup",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/backup/list": {
      "get": {
        "description": "Get list of all database backups with their status",
        "operationId": "AdminController_listBackups",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of backups to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "filename": {
                        "type": "string"
                      },
                      "size": {
                        "type": "number"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string"
                      },
                      "createdBy": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "List all backups",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/backup/restore": {
      "post": {
        "description": "Restore database from a specific backup (UC3.3)",
        "operationId": "AdminController_restoreFromBackup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restore initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restoreId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "completed",
                        "failed"
                      ]
                    },
                    "estimatedTime": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid backup file or restore parameters"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Restore from backup",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/backup/{backupId}/status": {
      "get": {
        "description": "Check the status of a backup or restore operation",
        "operationId": "AdminController_getBackupStatus",
        "parameters": [
          {
            "name": "backupId",
            "required": true,
            "in": "path",
            "description": "Backup operation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup status retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get backup status",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/system/health/detailed": {
      "get": {
        "description": "Comprehensive system health check for UC3.1",
        "operationId": "AdminController_getDetailedSystemHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System health information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemHealthDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get detailed system health",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/system/performance": {
      "get": {
        "description": "Retrieve system performance data and metrics",
        "operationId": "AdminController_getPerformanceMetrics",
        "parameters": [
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Time period for metrics",
            "schema": {
              "enum": [
                "1h",
                "24h",
                "7d",
                "30d"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "object"
                    },
                    "memory": {
                      "type": "object"
                    },
                    "database": {
                      "type": "object"
                    },
                    "api": {
                      "type": "object"
                    },
                    "errors": {
                      "type": "array"
                    },
                    "uptime": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get system performance metrics",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/maintenance/toggle": {
      "post": {
        "description": "Enable or disable system maintenance mode for UC3.1",
        "operationId": "AdminController_toggleMaintenanceMode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceModeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maintenance mode updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maintenanceMode": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "estimatedDuration": {
                      "type": "number"
                    },
                    "affectedServices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Toggle maintenance mode",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/maintenance/status": {
      "get": {
        "description": "Check if system is in maintenance mode",
        "operationId": "AdminController_getMaintenanceStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Maintenance status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isMaintenanceMode": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "estimatedEnd": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "enabledBy": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get maintenance mode status",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/users/statistics": {
      "get": {
        "description": "Comprehensive user statistics for system administration",
        "operationId": "AdminController_getUserStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalUsers": {
                      "type": "number"
                    },
                    "activeUsers": {
                      "type": "number"
                    },
                    "usersByType": {
                      "type": "object"
                    },
                    "usersByRole": {
                      "type": "object"
                    },
                    "recentRegistrations": {
                      "type": "number"
                    },
                    "blockedUsers": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user statistics",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/users/{userId}/suspend": {
      "post": {
        "description": "Suspend a user account for administrative reasons",
        "operationId": "AdminController_suspendUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID to suspend",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User suspended successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Suspend user account",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/users/{userId}/activate": {
      "post": {
        "description": "Reactivate a suspended user account",
        "operationId": "AdminController_activateUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID to activate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Activate user account",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/logs/system": {
      "get": {
        "description": "Retrieve system logs for monitoring and debugging",
        "operationId": "AdminController_getSystemLogs",
        "parameters": [
          {
            "name": "level",
            "required": false,
            "in": "query",
            "description": "Log level filter",
            "schema": {
              "enum": [
                "error",
                "warn",
                "info",
                "debug"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of log entries",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "level": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "module": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    },
                    "hasMore": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get system logs",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/admin/logs/audit": {
      "get": {
        "description": "Retrieve audit trail logs for security and compliance",
        "operationId": "AdminController_getAuditLogs",
        "parameters": [
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "description": "Filter by action type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of log entries",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "action": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          },
                          "details": {
                            "type": "object"
                          },
                          "ipAddress": {
                            "type": "string"
                          },
                          "userAgent": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get audit logs",
        "tags": [
          "System Administration"
        ]
      }
    },
    "/api/v1/analytics/customers/behavior": {
      "get": {
        "description": "Comprehensive customer behavior analysis for business insights",
        "operationId": "AnalyticsController_getCustomerBehaviorAnalytics",
        "parameters": [
          {
            "name": "segment",
            "required": false,
            "in": "query",
            "description": "Customer segment filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routes",
            "required": false,
            "in": "query",
            "description": "Specific train routes to analyze",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {
              "enum": [
                "7d",
                "30d",
                "90d",
                "1y"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer behavior analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get customer behavior analytics (UC3.10)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/customers/segments": {
      "get": {
        "description": "Customer segmentation based on behavior and purchase patterns",
        "operationId": "AnalyticsController_getCustomerSegmentation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Customer segments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "segments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "size": {
                            "type": "number"
                          },
                          "characteristics": {
                            "type": "object"
                          },
                          "avgOrderValue": {
                            "type": "number"
                          },
                          "frequency": {
                            "type": "number"
                          },
                          "loyaltyScore": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "totalCustomers": {
                      "type": "number"
                    },
                    "segmentationCriteria": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get customer segmentation analysis",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/customers/journey": {
      "get": {
        "description": "Customer journey mapping and funnel analysis",
        "operationId": "AnalyticsController_getCustomerJourneyAnalytics",
        "parameters": [
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {
              "enum": [
                "7d",
                "30d",
                "90d"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer journey analytics retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get customer journey analytics",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/kpi-dashboard": {
      "get": {
        "description": "Comprehensive KPI dashboard for operational performance monitoring",
        "operationId": "AnalyticsController_getKpiDashboard",
        "parameters": [
          {
            "name": "refresh",
            "required": false,
            "in": "query",
            "description": "Force refresh cache",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Dashboard period",
            "schema": {
              "enum": [
                "today",
                "7d",
                "30d",
                "90d"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KPI dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KpiDashboardDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get KPI dashboard (UC3.11)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/performance/operational": {
      "get": {
        "description": "Detailed operational performance analysis",
        "operationId": "AnalyticsController_getOperationalPerformance",
        "parameters": [
          {
            "name": "breakdown",
            "required": false,
            "in": "query",
            "description": "Performance breakdown",
            "schema": {
              "enum": [
                "route",
                "station",
                "vendor",
                "time"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Operational performance metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceMetricsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get operational performance metrics (UC3.11)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/business-intelligence": {
      "get": {
        "description": "Advanced business intelligence for strategic expansion decisions",
        "operationId": "AnalyticsController_getBusinessIntelligence",
        "parameters": [
          {
            "name": "focus",
            "required": false,
            "in": "query",
            "description": "Analysis focus area",
            "schema": {
              "enum": [
                "routes",
                "stations",
                "vendors",
                "products"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Business intelligence insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessIntelligenceDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get business intelligence insights (UC3.16)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/expansion/opportunities": {
      "get": {
        "description": "Data-driven expansion opportunities and market analysis",
        "operationId": "AnalyticsController_getExpansionOpportunities",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Expansion type",
            "schema": {
              "enum": [
                "new_routes",
                "new_stations",
                "new_products",
                "vendor_expansion"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expansion opportunities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "opportunities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "priority": {
                            "type": "string",
                            "enum": [
                              "high",
                              "medium",
                              "low"
                            ]
                          },
                          "potentialRevenue": {
                            "type": "number"
                          },
                          "investmentRequired": {
                            "type": "number"
                          },
                          "roi": {
                            "type": "number"
                          },
                          "riskLevel": {
                            "type": "string"
                          },
                          "timeline": {
                            "type": "object"
                          },
                          "recommendations": {
                            "type": "array"
                          }
                        }
                      }
                    },
                    "marketAnalysis": {
                      "type": "object"
                    },
                    "competitorInsights": {
                      "type": "object"
                    },
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get expansion opportunities analysis (UC3.16)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/predictive/demand": {
      "get": {
        "description": "AI-powered demand forecasting for strategic planning",
        "operationId": "AnalyticsController_getPredictiveDemandAnalysis",
        "parameters": [
          {
            "name": "routes",
            "required": false,
            "in": "query",
            "description": "Specific routes for forecasting",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "products",
            "required": false,
            "in": "query",
            "description": "Specific products for forecasting",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "horizon",
            "required": false,
            "in": "query",
            "description": "Forecast horizon",
            "schema": {
              "enum": [
                "7d",
                "30d",
                "90d",
                "1y"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Predictive demand analysis retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredictiveDemandDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get predictive demand analysis (UC3.16)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/sales/trends": {
      "get": {
        "description": "Comprehensive sales trends and pattern analysis",
        "operationId": "AnalyticsController_getSalesTrends",
        "parameters": [
          {
            "name": "breakdown",
            "required": false,
            "in": "query",
            "description": "Breakdown dimensions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Data granularity",
            "schema": {
              "enum": [
                "hourly",
                "daily",
                "weekly",
                "monthly"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Sales trends retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesTrendsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get sales trends analysis (UC3.10)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/revenue/analysis": {
      "get": {
        "description": "Detailed revenue analysis with various breakdowns and comparisons",
        "operationId": "AnalyticsController_getRevenueAnalysis",
        "parameters": [
          {
            "name": "comparison",
            "required": false,
            "in": "query",
            "description": "Include period comparison",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Revenue analysis retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevenueAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get revenue analysis",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/reports/custom": {
      "post": {
        "description": "Generate custom analytics reports with flexible parameters",
        "operationId": "AnalyticsController_generateCustomReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomReportRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reportId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "generated",
                        "processing",
                        "failed"
                      ]
                    },
                    "downloadUrl": {
                      "type": "string"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate custom analytics report (UC3.11)",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/reports/{reportId}": {
      "get": {
        "description": "Check custom report generation status or download completed report",
        "operationId": "AnalyticsController_getCustomReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "description": "Custom report ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report status or download link retrieved"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get custom report status or download",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/reports/history": {
      "get": {
        "description": "Get history of previously generated custom reports",
        "operationId": "AnalyticsController_getReportHistory",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of reports to return",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report history retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get report generation history",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/cohort/analysis": {
      "get": {
        "description": "Customer cohort analysis for retention and lifetime value insights",
        "operationId": "AnalyticsController_getCohortAnalysis",
        "parameters": [
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Cohort metric",
            "schema": {
              "enum": [
                "retention",
                "revenue",
                "frequency"
              ],
              "type": "string"
            }
          },
          {
            "name": "cohortType",
            "required": false,
            "in": "query",
            "description": "Cohort time grouping",
            "schema": {
              "enum": [
                "weekly",
                "monthly"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cohort analysis retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get cohort analysis",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/anomaly/detection": {
      "get": {
        "description": "AI-powered anomaly detection in sales, orders, and operational metrics",
        "operationId": "AnalyticsController_getAnomalyDetection",
        "parameters": [
          {
            "name": "sensitivity",
            "required": false,
            "in": "query",
            "description": "Detection sensitivity",
            "schema": {
              "enum": [
                "low",
                "medium",
                "high"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Detection period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Anomaly detection results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "anomalies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "severity": {
                            "type": "string",
                            "enum": [
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ]
                          },
                          "metric": {
                            "type": "string"
                          },
                          "expectedValue": {
                            "type": "number"
                          },
                          "actualValue": {
                            "type": "number"
                          },
                          "deviation": {
                            "type": "number"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "context": {
                            "type": "object"
                          },
                          "recommendations": {
                            "type": "array"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object"
                    },
                    "detectionRun": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get anomaly detection results",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/realtime/metrics": {
      "get": {
        "description": "Real-time operational metrics and alerts",
        "operationId": "AnalyticsController_getRealtimeMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Real-time metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentOrders": {
                      "type": "number"
                    },
                    "activeDeliveries": {
                      "type": "number"
                    },
                    "systemLoad": {
                      "type": "object"
                    },
                    "alerts": {
                      "type": "array"
                    },
                    "trends": {
                      "type": "object"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get real-time metrics dashboard",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/dashboard-stats": {
      "get": {
        "description": "Get real-time statistics for the operations dashboard including vendor counts and order metrics",
        "operationId": "AnalyticsController_getDashboardStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activeVendors": {
                      "type": "number",
                      "example": 93
                    },
                    "ordersToday": {
                      "type": "number",
                      "example": 287
                    },
                    "pendingOrders": {
                      "type": "number",
                      "example": 45
                    },
                    "completedOrders": {
                      "type": "number",
                      "example": 242
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          },
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get dashboard statistics for operations admin",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/analytics/export/{reportType}": {
      "post": {
        "description": "Export analytics data in various formats (CSV, Excel, PDF)",
        "operationId": "AnalyticsController_exportAnalyticsData",
        "parameters": [
          {
            "name": "reportType",
            "required": true,
            "in": "path",
            "description": "Type of report to export",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export initiated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Export analytics data",
        "tags": [
          "Analytics & Business Intelligence"
        ]
      }
    },
    "/api/v1/staff/shifts/checkin": {
      "post": {
        "description": "Check in for work shift with location and device verification",
        "operationId": "StaffManagementController_checkInShift",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shift check-in successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid check-in data or shift not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Staff shift check-in (UC2.6)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/shifts/checkout": {
      "post": {
        "description": "Check out from work shift with performance summary",
        "operationId": "StaffManagementController_checkOutShift",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckOutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shift check-out successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "No active shift found or invalid data"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Staff shift check-out (UC2.9)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/shifts/current": {
      "get": {
        "description": "Get details of the current active shift for the staff member",
        "operationId": "StaffManagementController_getCurrentShift",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current shift details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftStatusDto"
                }
              }
            }
          },
          "404": {
            "description": "No active shift found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current active shift",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/shifts/history": {
      "get": {
        "description": "Get historical shift data for the staff member",
        "operationId": "StaffManagementController_getShiftHistory",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of shifts to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shifts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShiftStatusDto"
                      }
                    },
                    "totalShifts": {
                      "type": "number"
                    },
                    "totalHours": {
                      "type": "number"
                    },
                    "avgPerformance": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get shift history",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/shifts/{shiftId}/report": {
      "post": {
        "description": "Submit detailed shift performance report with metrics and issues",
        "operationId": "StaffManagementController_submitShiftReport",
        "parameters": [
          {
            "name": "shiftId",
            "required": true,
            "in": "path",
            "description": "Shift ID to report on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftReportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shift report submitted successfully"
          },
          "404": {
            "description": "Shift not found or not authorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Submit shift performance report (UC2.9)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/performance/summary": {
      "get": {
        "description": "Get comprehensive performance summary for the staff member",
        "operationId": "StaffManagementController_getPerformanceSummary",
        "parameters": [
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Performance period",
            "schema": {
              "enum": [
                "week",
                "month",
                "quarter"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftPerformanceDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get staff performance summary (UC2.9)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/performance/analytics": {
      "get": {
        "description": "Get detailed analytics including trends and comparisons",
        "operationId": "StaffManagementController_getPerformanceAnalytics",
        "parameters": [
          {
            "name": "breakdown",
            "required": false,
            "in": "query",
            "description": "Performance breakdown type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analysis period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Performance analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "type": "object"
                    },
                    "trends": {
                      "type": "array"
                    },
                    "comparisons": {
                      "type": "object"
                    },
                    "recommendations": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get detailed performance analytics",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/tasks/assigned": {
      "get": {
        "description": "Get all tasks assigned to the staff member for the current shift",
        "operationId": "StaffManagementController_getAssignedTasks",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Task status filter",
            "schema": {
              "enum": [
                "pending",
                "in_progress",
                "completed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assigned tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "priority": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "assignedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "dueAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "location": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "totalTasks": {
                      "type": "number"
                    },
                    "completedTasks": {
                      "type": "number"
                    },
                    "pendingTasks": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assigned tasks for current shift",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/tasks/{taskId}/status": {
      "put": {
        "description": "Update the status of an assigned task with optional notes",
        "operationId": "StaffManagementController_updateTaskStatus",
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Task ID to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status updated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update task status",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/delivery/{deliveryId}/confirm-qr": {
      "post": {
        "description": "Confirm order delivery by scanning customer QR code",
        "operationId": "StaffManagementController_confirmDeliveryWithQR",
        "parameters": [
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "description": "Delivery ID to confirm",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QrDeliveryConfirmationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delivery confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "deliveryId": {
                      "type": "string"
                    },
                    "confirmedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "customerVerified": {
                      "type": "boolean"
                    },
                    "location": {
                      "type": "string"
                    },
                    "photoEvidence": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid QR code or delivery not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Confirm delivery with QR code scan (UC2.6)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/delivery/pending": {
      "get": {
        "description": "Get all pending delivery tasks assigned to the current staff member",
        "operationId": "StaffManagementController_getPendingDeliveries",
        "parameters": [
          {
            "name": "location",
            "required": false,
            "in": "query",
            "description": "Filter by delivery location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "description": "Filter by priority",
            "schema": {
              "enum": [
                "low",
                "medium",
                "high",
                "urgent"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending deliveries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deliveries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "orderId": {
                            "type": "string"
                          },
                          "customerName": {
                            "type": "string"
                          },
                          "customerPhone": {
                            "type": "string"
                          },
                          "deliveryLocation": {
                            "type": "string"
                          },
                          "priority": {
                            "type": "string"
                          },
                          "estimatedDeliveryTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "items": {
                            "type": "array"
                          },
                          "specialInstructions": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "totalDeliveries": {
                      "type": "number"
                    },
                    "urgentCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get pending deliveries assigned to staff",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/schedule": {
      "get": {
        "description": "Get work schedule for the staff member or team (admin view)",
        "operationId": "StaffManagementController_getSchedule",
        "parameters": [
          {
            "name": "staffId",
            "required": false,
            "in": "query",
            "description": "Specific staff member (admin only)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "required": false,
            "in": "query",
            "description": "Schedule view type",
            "schema": {
              "enum": [
                "personal",
                "team"
              ],
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Schedule period",
            "schema": {
              "enum": [
                "week",
                "month"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffScheduleDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get staff schedule",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/schedule/availability": {
      "put": {
        "description": "Update personal availability preferences and constraints",
        "operationId": "StaffManagementController_updateAvailability",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Availability updated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update staff availability",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/team/performance": {
      "get": {
        "description": "Get performance metrics for the entire staff team or department",
        "operationId": "StaffManagementController_getTeamPerformance",
        "parameters": [
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Filter by department",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "description": "Filter by location/station",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Performance period",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Team performance metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "teamMetrics": {
                      "type": "object",
                      "properties": {
                        "totalStaff": {
                          "type": "number"
                        },
                        "activeStaff": {
                          "type": "number"
                        },
                        "avgPerformanceScore": {
                          "type": "number"
                        },
                        "totalHoursWorked": {
                          "type": "number"
                        },
                        "attendanceRate": {
                          "type": "number"
                        }
                      }
                    },
                    "departmentBreakdown": {
                      "type": "array"
                    },
                    "topPerformers": {
                      "type": "array"
                    },
                    "improvementAreas": {
                      "type": "array"
                    },
                    "recommendations": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get team performance metrics (Admin)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/team/assignment": {
      "post": {
        "description": "Assign delivery or operational tasks to specific staff members",
        "operationId": "StaffManagementController_assignTasksToStaff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks assigned successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Assign tasks to staff members (Admin)",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/emergency/alert": {
      "post": {
        "description": "Send emergency alert to supervisors and relevant staff",
        "operationId": "StaffManagementController_sendEmergencyAlert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Emergency alert sent successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Send emergency alert",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/notifications/urgent": {
      "get": {
        "description": "Get urgent notifications and alerts for the staff member",
        "operationId": "StaffManagementController_getUrgentNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Urgent notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alerts": {
                      "type": "array"
                    },
                    "announcements": {
                      "type": "array"
                    },
                    "taskUpdates": {
                      "type": "array"
                    },
                    "systemMessages": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get urgent notifications",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/vendor/{vendorId}": {
      "get": {
        "description": "Get all staff members for a specific vendor",
        "operationId": "StaffManagementController_getVendorStaff",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by staff role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Filter by department",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor staff list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorStaffResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get vendor staff list",
        "tags": [
          "Staff Management"
        ]
      },
      "post": {
        "description": "Add a new staff member to a vendor",
        "operationId": "StaffManagementController_addVendorStaff",
        "parameters": [
          {
            "name": "vendorId",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVendorStaffDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Staff member added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorStaffResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid staff data or email already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Add vendor staff member",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/{staffId}": {
      "put": {
        "description": "Update details of an existing staff member",
        "operationId": "StaffManagementController_updateVendorStaff",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "description": "Staff member ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorStaffDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorStaffResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update staff member details",
        "tags": [
          "Staff Management"
        ]
      },
      "delete": {
        "description": "Remove a staff member from the vendor (soft delete)",
        "operationId": "StaffManagementController_removeVendorStaff",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "description": "Staff member ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Staff member removed successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Remove staff member",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/{staffId}/role": {
      "put": {
        "description": "Update role and permissions for a staff member",
        "operationId": "StaffManagementController_updateStaffRole",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "description": "Staff member ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "vendor_staff",
                      "vendor_admin",
                      "cashier"
                    ]
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorStaffResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update staff role/permissions",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/reassign": {
      "put": {
        "operationId": "StaffManagementController_reassignStaff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Staff reassignment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffReassignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff reassigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Staff successfully reassigned"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "staffId": {
                          "type": "string",
                          "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                        },
                        "previousVendorId": {
                          "type": "string",
                          "nullable": true
                        },
                        "newVendorId": {
                          "type": "string",
                          "nullable": true
                        },
                        "reassignedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Staff member or vendor not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          },
          {
            "JWT-auth": []
          }
        ],
        "summary": "Reassign staff member to different vendor",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/staff/assignments": {
      "get": {
        "operationId": "StaffManagementController_getStaffAssignments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Staff assignments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "staffId": {
                            "type": "string"
                          },
                          "staffName": {
                            "type": "string"
                          },
                          "vendorId": {
                            "type": "string",
                            "nullable": true
                          },
                          "vendorName": {
                            "type": "string",
                            "nullable": true
                          },
                          "trainCode": {
                            "type": "string",
                            "nullable": true
                          },
                          "assignedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          },
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all staff assignments",
        "tags": [
          "Staff Management"
        ]
      }
    },
    "/api/v1/cms/articles": {
      "post": {
        "operationId": "CmsController_createArticle",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new article",
        "tags": [
          "CMS"
        ]
      },
      "get": {
        "operationId": "CmsController_findAllArticles",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "draft",
                "pending",
                "published",
                "archived"
              ],
              "type": "string"
            }
          },
          {
            "name": "authorId",
            "required": false,
            "in": "query",
            "description": "Filter by author ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "required": false,
            "in": "query",
            "description": "Filter by tag ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Filter from date (ISO string)",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Filter to date (ISO string)",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "withCount",
            "required": false,
            "in": "query",
            "description": "Include total count",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "withTags",
            "required": false,
            "in": "query",
            "description": "Include tags",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Articles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all articles with pagination and filters",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/{id}": {
      "get": {
        "operationId": "CmsController_findArticleById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withTags",
            "required": false,
            "in": "query",
            "description": "Include tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get article by ID",
        "tags": [
          "CMS"
        ]
      },
      "put": {
        "operationId": "CmsController_updateArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an article",
        "tags": [
          "CMS"
        ]
      },
      "delete": {
        "operationId": "CmsController_deleteArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Article deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an article",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/slug/{slug}": {
      "get": {
        "operationId": "CmsController_findArticleBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Article slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withTags",
            "required": false,
            "in": "query",
            "description": "Include tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get article by slug",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/{id}/publish": {
      "put": {
        "operationId": "CmsController_publishArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish an article",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/{id}/unpublish": {
      "put": {
        "operationId": "CmsController_unpublishArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article unpublished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unpublish an article",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/{id}/archive": {
      "put": {
        "operationId": "CmsController_archiveArticle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Archive an article",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/{id}/view": {
      "post": {
        "operationId": "CmsController_incrementViewCount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "View count incremented"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Increment article view count",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/bulk/status": {
      "put": {
        "operationId": "CmsController_bulkUpdateStatus",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "pending",
                      "published",
                      "archived"
                    ]
                  }
                },
                "required": [
                  "ids",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Articles updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk update article status",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/articles/bulk": {
      "delete": {
        "operationId": "CmsController_bulkDeleteArticles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Articles deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk delete articles",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags": {
      "post": {
        "operationId": "CmsController_createTag",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new tag",
        "tags": [
          "CMS"
        ]
      },
      "get": {
        "operationId": "CmsController_findAllTags",
        "parameters": [
          {
            "name": "includeInactive",
            "required": false,
            "in": "query",
            "description": "Include inactive tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tags",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/tree": {
      "get": {
        "operationId": "CmsController_findTagTree",
        "parameters": [
          {
            "name": "includeInactive",
            "required": false,
            "in": "query",
            "description": "Include inactive tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag tree retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tags as hierarchical tree",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/popular": {
      "get": {
        "operationId": "CmsController_getPopularTags",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of tags to return",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Popular tags retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get popular tags by usage",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/{id}": {
      "get": {
        "operationId": "CmsController_findTagById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tag by ID",
        "tags": [
          "CMS"
        ]
      },
      "put": {
        "operationId": "CmsController_updateTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a tag",
        "tags": [
          "CMS"
        ]
      },
      "delete": {
        "operationId": "CmsController_deleteTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteChildren",
            "required": false,
            "in": "query",
            "description": "Delete child tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a tag",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/{id}/stats": {
      "get": {
        "operationId": "CmsController_getTagStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag stats retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tag usage statistics",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/slug/{slug}": {
      "get": {
        "operationId": "CmsController_findTagBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Tag slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tag by slug",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/{id}/activate": {
      "put": {
        "operationId": "CmsController_activateTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeChildren",
            "required": false,
            "in": "query",
            "description": "Include child tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate a tag",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/{id}/deactivate": {
      "put": {
        "operationId": "CmsController_deactivateTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeChildren",
            "required": false,
            "in": "query",
            "description": "Include child tags",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deactivate a tag",
        "tags": [
          "CMS"
        ]
      }
    },
    "/api/v1/cms/tags/reorder": {
      "put": {
        "operationId": "CmsController_reorderTags",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tagOrders": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "sortOrder": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "sortOrder"
                      ]
                    }
                  }
                },
                "required": [
                  "tagOrders"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Tags reordered successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reorder tags",
        "tags": [
          "CMS"
        ]
      }
    }
  },
  "info": {
    "title": "Railway Food Ordering System API",
    "description": "Comprehensive API for railway food ordering and delivery system",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Trains",
      "description": "Train and station management endpoints"
    },
    {
      "name": "Vendors",
      "description": "Vendor and supplier management endpoints"
    },
    {
      "name": "Menu",
      "description": "Food menu and inventory management endpoints"
    },
    {
      "name": "Orders",
      "description": "Order processing and tracking endpoints"
    },
    {
      "name": "Payments",
      "description": "Payment processing and gateway integration endpoints"
    },
    {
      "name": "Delivery",
      "description": "Delivery task management endpoints"
    },
    {
      "name": "Support",
      "description": "Customer support and ticketing endpoints"
    },
    {
      "name": "Reports",
      "description": "Analytics and reporting endpoints"
    },
    {
      "name": "System",
      "description": "System health and monitoring endpoints"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {}
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          }
        },
        "required": [
          "phone"
        ]
      },
      "OtpResponseDto": {
        "type": "object",
        "properties": {
          "sent": {
            "type": "boolean",
            "description": "OTP sent successfully",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message for user",
            "example": "OTP code sent to your phone number"
          },
          "expiresIn": {
            "type": "number",
            "description": "OTP expiration time in seconds",
            "example": 300
          },
          "remainingAttempts": {
            "type": "number",
            "description": "Remaining attempts",
            "example": 5
          },
          "canResend": {
            "type": "boolean",
            "description": "Can resend OTP",
            "example": false
          }
        },
        "required": [
          "sent",
          "message",
          "expiresIn",
          "remainingAttempts",
          "canResend"
        ]
      },
      "VerifyOtpDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          },
          "otp": {
            "type": "string",
            "description": "OTP code sent to phone",
            "example": "123456",
            "minLength": 6,
            "maxLength": 6
          },
          "deviceToken": {
            "type": "string",
            "description": "Device token for push notifications"
          }
        },
        "required": [
          "phone",
          "otp"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expiresIn": {
            "type": "number",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "tokenType": {
            "type": "string",
            "description": "Token type",
            "example": "Bearer"
          },
          "user": {
            "type": "object",
            "description": "User information"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "expiresIn",
          "tokenType",
          "user"
        ]
      },
      "PasswordLoginDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          },
          "password": {
            "type": "string",
            "description": "Password for login",
            "example": "Password123!"
          },
          "deviceToken": {
            "type": "string",
            "description": "Device token for push notifications"
          }
        },
        "required": [
          "phone",
          "password"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "example": "Nguyen Van A"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "user@example.com"
          },
          "userType": {
            "type": "string",
            "description": "User type",
            "enum": [
              "passenger",
              "vendor_staff",
              "train_staff",
              "station_staff",
              "admin"
            ],
            "example": "passenger"
          },
          "deviceToken": {
            "type": "string",
            "description": "Device token for push notifications"
          }
        },
        "required": [
          "phone"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "LogoutDto": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "Session token to invalidate"
          },
          "logoutAll": {
            "type": "boolean",
            "description": "Logout all sessions",
            "default": false
          }
        }
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          }
        },
        "required": [
          "phone"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number in Vietnamese format",
            "example": "+84901234567"
          },
          "otp": {
            "type": "string",
            "description": "OTP code sent to phone",
            "example": "123456"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "phone",
          "otp",
          "newPassword"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password",
            "example": "CurrentPassword123!"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "SetupTotpDto": {
        "type": "object",
        "properties": {}
      },
      "SetupSmsDto": {
        "type": "object",
        "properties": {}
      },
      "VerifySetupDto": {
        "type": "object",
        "properties": {}
      },
      "StartVerificationDto": {
        "type": "object",
        "properties": {}
      },
      "VerifyCodeDto": {
        "type": "object",
        "properties": {}
      },
      "Train": {
        "type": "object",
        "properties": {}
      },
      "StationCoordinatesDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "StationFacilitiesDto": {
        "type": "object",
        "properties": {
          "wifi": {
            "type": "boolean",
            "description": "Has WiFi"
          },
          "restaurant": {
            "type": "boolean",
            "description": "Has restaurant"
          },
          "parking": {
            "type": "boolean",
            "description": "Has parking"
          },
          "elevator": {
            "type": "boolean",
            "description": "Has elevator"
          },
          "wheelchair": {
            "type": "boolean",
            "description": "Wheelchair accessible"
          },
          "luggage": {
            "type": "boolean",
            "description": "Has luggage storage"
          },
          "waitingRoom": {
            "type": "boolean",
            "description": "Has waiting room"
          }
        }
      },
      "OperatingHoursDto": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "description": "Opening time",
            "example": "06:00"
          },
          "close": {
            "type": "string",
            "description": "Closing time",
            "example": "22:00"
          }
        },
        "required": [
          "open",
          "close"
        ]
      },
      "StationOperatingHoursDto": {
        "type": "object",
        "properties": {
          "weekday": {
            "description": "Weekday hours",
            "allOf": [
              {
                "$ref": "#/components/schemas/OperatingHoursDto"
              }
            ]
          },
          "weekend": {
            "description": "Weekend hours",
            "allOf": [
              {
                "$ref": "#/components/schemas/OperatingHoursDto"
              }
            ]
          },
          "holiday": {
            "description": "Holiday hours",
            "allOf": [
              {
                "$ref": "#/components/schemas/OperatingHoursDto"
              }
            ]
          }
        }
      },
      "StationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Station ID",
            "format": "uuid"
          },
          "stationCode": {
            "type": "string",
            "description": "Station code",
            "example": "HN"
          },
          "stationName": {
            "type": "string",
            "description": "Station name",
            "example": "Hà Nội"
          },
          "code": {
            "type": "string",
            "description": "Station code (alias)",
            "example": "HN"
          },
          "name": {
            "type": "string",
            "description": "Station name (alias)",
            "example": "Hà Nội"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Hà Nội"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Hà Nội"
          },
          "address": {
            "type": "string",
            "description": "Full address"
          },
          "coordinates": {
            "description": "GPS coordinates",
            "allOf": [
              {
                "$ref": "#/components/schemas/StationCoordinatesDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Station status",
            "enum": [
              "active",
              "inactive",
              "maintenance"
            ]
          },
          "facilities": {
            "description": "Station facilities",
            "allOf": [
              {
                "$ref": "#/components/schemas/StationFacilitiesDto"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "Station description"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number"
          },
          "operatingHours": {
            "description": "Operating hours",
            "allOf": [
              {
                "$ref": "#/components/schemas/StationOperatingHoursDto"
              }
            ]
          },
          "specialties": {
            "description": "Local food specialties",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "stationCode",
          "stationName",
          "code",
          "name",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "StationListMetaDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of stations"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "required": [
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "StationListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of stations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StationResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/StationListMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "TrainSchedule": {
        "type": "object",
        "properties": {}
      },
      "Ticket": {
        "type": "object",
        "properties": {}
      },
      "Station": {
        "type": "object",
        "properties": {}
      },
      "VerifyTicketDto": {
        "type": "object",
        "properties": {
          "qrData": {
            "type": "string",
            "description": "QR code data from VNTicket",
            "example": "123456789;SE1;HN;HCM;250125;2501251430;NGUYEN VAN A;field1;;01;10A;VIP;250000;checksum;"
          },
          "passengerPhone": {
            "type": "string",
            "description": "Passenger phone number",
            "example": "+84901234567"
          },
          "verificationMethod": {
            "type": "string",
            "description": "Verification method",
            "enum": [
              "qr_code",
              "manual",
              "api"
            ],
            "example": "qr_code"
          }
        },
        "required": [
          "qrData"
        ]
      },
      "TicketVerificationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Verification ID",
            "example": "uuid-string"
          },
          "ticketNumber": {
            "type": "string",
            "description": "Ticket number",
            "example": "123456789"
          },
          "verificationStatus": {
            "type": "string",
            "description": "Verification status",
            "example": "verified"
          },
          "isValidForOrdering": {
            "type": "boolean",
            "description": "Whether ticket is valid for ordering",
            "example": true
          },
          "parsedData": {
            "type": "object",
            "description": "Parsed ticket data"
          },
          "verifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Verification timestamp",
            "example": "2025-01-25T14:30:00Z"
          },
          "failureReason": {
            "type": "string",
            "description": "Failure reason if verification failed"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration timestamp",
            "example": "2025-01-25T18:30:00Z"
          }
        },
        "required": [
          "id",
          "ticketNumber",
          "verificationStatus",
          "isValidForOrdering"
        ]
      },
      "BulkVerifyTicketsDto": {
        "type": "object",
        "properties": {
          "qrDataList": {
            "description": "Array of QR data to verify",
            "example": [
              "123456789;SE1;HN;HCM;250125;2501251430;NGUYEN VAN A;field1;;01;10A;VIP;250000;checksum;",
              "987654321;SE2;HCM;HN;250125;2501251630;TRAN THI B;field1;;02;15B;STANDARD;180000;checksum;"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verificationMethod": {
            "type": "string",
            "description": "Verification method",
            "enum": [
              "qr_code",
              "manual",
              "api"
            ],
            "example": "qr_code"
          }
        },
        "required": [
          "qrDataList"
        ]
      },
      "BulkVerificationResponseDto": {
        "type": "object",
        "properties": {
          "totalProcessed": {
            "type": "number",
            "description": "Number of tickets processed",
            "example": 2
          },
          "successfullyVerified": {
            "type": "number",
            "description": "Number of successfully verified tickets",
            "example": 1
          },
          "failed": {
            "type": "number",
            "description": "Number of failed verifications",
            "example": 1
          },
          "results": {
            "description": "Individual verification results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketVerificationResponseDto"
            }
          }
        },
        "required": [
          "totalProcessed",
          "successfullyVerified",
          "failed",
          "results"
        ]
      },
      "GetTicketInfoDto": {
        "type": "object",
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "Ticket number",
            "example": "123456789"
          },
          "passengerPhone": {
            "type": "string",
            "description": "Passenger phone for verification",
            "example": "+84901234567"
          }
        },
        "required": [
          "ticketNumber"
        ]
      },
      "TicketInfoResponseDto": {
        "type": "object",
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "Ticket number",
            "example": "123456789"
          },
          "trainCode": {
            "type": "string",
            "description": "Train code",
            "example": "SE1"
          },
          "originStationCode": {
            "type": "string",
            "description": "Origin station code",
            "example": "HN"
          },
          "destinationStationCode": {
            "type": "string",
            "description": "Destination station code",
            "example": "HCM"
          },
          "travelDate": {
            "type": "string",
            "description": "Travel date",
            "example": "2025-01-25"
          },
          "departureTime": {
            "type": "string",
            "description": "Departure time",
            "example": "14:30"
          },
          "passengerName": {
            "type": "string",
            "description": "Passenger name"
          },
          "carNumber": {
            "type": "number",
            "description": "Car number"
          },
          "seatNumber": {
            "type": "string",
            "description": "Seat number"
          },
          "seatType": {
            "type": "string",
            "description": "Seat type"
          },
          "ticketPrice": {
            "type": "string",
            "description": "Ticket price",
            "example": "250000"
          },
          "isValidForOrdering": {
            "type": "boolean",
            "description": "Whether ticket is valid for ordering",
            "example": true
          },
          "lastVerifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last verification time"
          }
        },
        "required": [
          "ticketNumber",
          "trainCode",
          "originStationCode",
          "destinationStationCode",
          "travelDate",
          "departureTime",
          "ticketPrice",
          "isValidForOrdering"
        ]
      },
      "UpdateVerificationDto": {
        "type": "object",
        "properties": {
          "verificationStatus": {
            "type": "string",
            "description": "Updated verification status",
            "example": "verified"
          },
          "isValidForOrdering": {
            "type": "boolean",
            "description": "Whether ticket is valid for ordering"
          },
          "failureReason": {
            "type": "string",
            "description": "Failure reason"
          }
        }
      },
      "Decimal": {
        "type": "object",
        "properties": {}
      },
      "VendorLocation": {
        "type": "object",
        "properties": {}
      },
      "VendorContract": {
        "type": "object",
        "properties": {}
      },
      "VendorPayoutSetting": {
        "type": "object",
        "properties": {}
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "Business name",
            "example": "Phở Hà Nội Restaurant"
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown to customers",
            "example": "Phở Hà Nội"
          },
          "description": {
            "type": "string",
            "description": "Business description"
          },
          "businessRegistrationNumber": {
            "type": "string",
            "description": "Business registration number",
            "example": "BRC123456789"
          },
          "taxIdNumber": {
            "type": "string",
            "description": "Tax ID number",
            "example": "TAX123456"
          },
          "status": {
            "type": "string",
            "description": "Vendor status",
            "enum": [
              "pending",
              "approved",
              "suspended",
              "rejected",
              "inactive"
            ],
            "example": "pending"
          },
          "vendorType": {
            "type": "string",
            "description": "Vendor type",
            "enum": [
              "restaurant",
              "cafe",
              "fast_food",
              "beverage",
              "local_specialty",
              "retail",
              "catering",
              "train_service",
              "station_service"
            ],
            "example": "restaurant"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is vendor active",
            "example": true
          },
          "isVerified": {
            "type": "boolean",
            "description": "Is vendor verified",
            "example": false
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Is vendor featured",
            "example": false
          },
          "contactPersonName": {
            "type": "string",
            "description": "Contact person name",
            "example": "Nguyễn Văn A"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+84901234567"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email",
            "example": "contact@phohanoi.com"
          },
          "emergencyPhone": {
            "type": "string",
            "description": "Emergency phone number",
            "example": "+84987654321"
          },
          "businessAddress": {
            "type": "string",
            "description": "Business address",
            "example": "123 Phố Hàng Bài, Hoàn Kiếm"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Hà Nội"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Hà Nội"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "100000"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "Vietnam"
          },
          "commissionRate": {
            "description": "Commission rate percentage",
            "example": 5,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "totalEarnings": {
            "description": "Total earnings amount",
            "example": 1000000,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "pendingPayout": {
            "description": "Pending payout amount",
            "example": 50000,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "totalPaidOut": {
            "description": "Total paid out amount",
            "example": 950000,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "preferredCurrency": {
            "type": "string",
            "description": "Preferred currency",
            "example": "VND"
          },
          "businessHours": {
            "type": "object",
            "description": "Business operating hours for each day of the week",
            "example": {
              "monday": {
                "open": "08:00",
                "close": "22:00"
              },
              "tuesday": {
                "open": "08:00",
                "close": "22:00"
              },
              "wednesday": {
                "open": "08:00",
                "close": "22:00"
              },
              "thursday": {
                "open": "08:00",
                "close": "22:00"
              },
              "friday": {
                "open": "08:00",
                "close": "23:00"
              },
              "saturday": {
                "open": "09:00",
                "close": "23:00"
              },
              "sunday": {
                "closed": true
              }
            }
          },
          "averagePreparationTime": {
            "type": "number",
            "description": "Average preparation time in minutes",
            "example": 30
          },
          "dailyOrderCapacity": {
            "type": "number",
            "description": "Maximum daily order capacity",
            "example": 100
          },
          "acceptsOnlineOrders": {
            "type": "boolean",
            "description": "Whether vendor accepts online orders",
            "example": true
          },
          "acceptsAdvanceOrders": {
            "type": "boolean",
            "description": "Whether vendor accepts advance orders",
            "example": false
          },
          "advanceOrderHours": {
            "type": "number",
            "description": "How many hours in advance orders can be placed",
            "example": 24
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo image URL",
            "example": "https://example.com/logo.png"
          },
          "bannerImageUrl": {
            "type": "string",
            "description": "Banner image URL",
            "example": "https://example.com/banner.jpg"
          },
          "galleryImages": {
            "description": "Gallery image URLs",
            "example": [
              "https://example.com/image1.jpg",
              "https://example.com/image2.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "primaryColor": {
            "type": "string",
            "description": "Primary brand color",
            "example": "#FF6B35"
          },
          "secondaryColor": {
            "type": "string",
            "description": "Secondary brand color",
            "example": "#004225"
          },
          "averageRating": {
            "type": "number",
            "description": "Average customer rating",
            "example": 4.5
          },
          "totalReviews": {
            "type": "number",
            "description": "Total number of reviews",
            "example": 125
          },
          "totalOrders": {
            "type": "number",
            "description": "Total number of orders received",
            "example": 1500
          },
          "completedOrders": {
            "type": "number",
            "description": "Number of completed orders",
            "example": 1450
          },
          "cancelledOrders": {
            "type": "number",
            "description": "Number of cancelled orders",
            "example": 50
          },
          "certifications": {
            "description": "Business certifications",
            "example": [
              {
                "name": "Food Safety Certificate",
                "issuedBy": "Ministry of Health",
                "issuedDate": "2024-01-15",
                "expiryDate": "2025-01-15",
                "certificateUrl": "https://example.com/cert.pdf"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "licenses": {
            "description": "Business licenses",
            "example": [
              {
                "type": "Business License",
                "number": "BL123456",
                "issuedBy": "Municipal Government",
                "issuedDate": "2024-01-01",
                "expiryDate": "2025-01-01",
                "documentUrl": "https://example.com/license.pdf"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "foodSafetyCertified": {
            "type": "boolean",
            "description": "Whether vendor has food safety certification",
            "example": true
          },
          "lastInspectionDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of last health inspection",
            "example": "2024-06-15"
          },
          "inspectionScore": {
            "type": "string",
            "description": "Latest inspection score",
            "example": "A"
          },
          "notificationSettings": {
            "type": "object",
            "description": "Notification preferences",
            "example": {
              "emailNotifications": true,
              "smsNotifications": false,
              "pushNotifications": true,
              "orderNotifications": true,
              "paymentNotifications": true,
              "promotionalEmails": false
            }
          },
          "specialRequirements": {
            "type": "object",
            "description": "Special dietary and sourcing requirements",
            "example": {
              "halal": true,
              "vegetarian": false,
              "vegan": false,
              "glutenFree": true,
              "organic": false,
              "locallySourced": true,
              "customRequirements": [
                "No MSG",
                "Free-range meat"
              ]
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata and settings",
            "example": {
              "onboardingCompleted": true,
              "onboardingStep": 5,
              "lastLoginAt": "2024-01-15T10:30:00Z",
              "preferredLanguage": "vi",
              "timezone": "Asia/Ho_Chi_Minh",
              "notes": "High-quality restaurant",
              "tags": [
                "popular",
                "fast-service"
              ],
              "referralSource": "google-ads",
              "accountManagerId": "am-123"
            }
          },
          "approvedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when vendor was approved",
            "example": "2024-01-15T10:30:00Z"
          },
          "suspendedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when vendor was suspended",
            "example": "2024-06-15T14:20:00Z"
          },
          "suspensionReason": {
            "type": "string",
            "description": "Reason for suspension",
            "example": "Multiple customer complaints"
          },
          "lastActiveAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last activity timestamp",
            "example": "2024-01-15T16:45:00Z"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner user ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "owner": {
            "description": "Vendor owner details",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "locations": {
            "description": "Vendor locations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorLocation"
            }
          },
          "contracts": {
            "description": "Vendor contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorContract"
            }
          },
          "payoutSettings": {
            "description": "Vendor payout settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorPayoutSetting"
            }
          }
        },
        "required": [
          "businessName",
          "businessRegistrationNumber",
          "status",
          "vendorType",
          "isActive",
          "isVerified",
          "isFeatured",
          "contactPersonName",
          "contactPhone",
          "contactEmail",
          "businessAddress",
          "country",
          "commissionRate",
          "totalEarnings",
          "pendingPayout",
          "totalPaidOut",
          "preferredCurrency",
          "averagePreparationTime",
          "dailyOrderCapacity",
          "acceptsOnlineOrders",
          "acceptsAdvanceOrders",
          "advanceOrderHours",
          "averageRating",
          "totalReviews",
          "totalOrders",
          "completedOrders",
          "cancelledOrders",
          "foodSafetyCertified"
        ]
      },
      "DayHoursDto": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "example": "09:00"
          },
          "close": {
            "type": "string",
            "example": "18:00"
          },
          "closed": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "open",
          "close"
        ]
      },
      "SpecialHoursDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2025-12-25"
          },
          "open": {
            "type": "string",
            "example": "10:00"
          },
          "close": {
            "type": "string",
            "example": "16:00"
          },
          "closed": {
            "type": "boolean"
          },
          "reason": {
            "type": "string",
            "example": "Holiday hours"
          }
        },
        "required": [
          "date",
          "open",
          "close"
        ]
      },
      "BusinessHoursDto": {
        "type": "object",
        "properties": {
          "monday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "tuesday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "wednesday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "thursday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "friday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "saturday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "sunday": {
            "$ref": "#/components/schemas/DayHoursDto"
          },
          "specialHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialHoursDto"
            }
          }
        }
      },
      "CertificationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Food Safety Certificate"
          },
          "issuedBy": {
            "type": "string",
            "example": "Ministry of Health"
          },
          "issuedDate": {
            "type": "string",
            "example": "2025-01-01"
          },
          "expiryDate": {
            "type": "string",
            "example": "2026-01-01"
          },
          "certificateUrl": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "issuedBy",
          "issuedDate"
        ]
      },
      "LicenseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Business License"
          },
          "number": {
            "type": "string",
            "example": "BL123456789"
          },
          "issuedBy": {
            "type": "string",
            "example": "Department of Planning and Investment"
          },
          "issuedDate": {
            "type": "string",
            "example": "2025-01-01"
          },
          "expiryDate": {
            "type": "string",
            "example": "2030-01-01"
          },
          "documentUrl": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "number",
          "issuedBy",
          "issuedDate"
        ]
      },
      "NotificationSettingsDto": {
        "type": "object",
        "properties": {
          "emailNotifications": {
            "type": "boolean",
            "default": true
          },
          "smsNotifications": {
            "type": "boolean",
            "default": true
          },
          "pushNotifications": {
            "type": "boolean",
            "default": true
          },
          "orderNotifications": {
            "type": "boolean",
            "default": true
          },
          "paymentNotifications": {
            "type": "boolean",
            "default": true
          },
          "promotionalEmails": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "emailNotifications",
          "smsNotifications",
          "pushNotifications",
          "orderNotifications",
          "paymentNotifications",
          "promotionalEmails"
        ]
      },
      "SpecialRequirementsDto": {
        "type": "object",
        "properties": {
          "halal": {
            "type": "boolean",
            "default": false
          },
          "vegetarian": {
            "type": "boolean",
            "default": false
          },
          "vegan": {
            "type": "boolean",
            "default": false
          },
          "glutenFree": {
            "type": "boolean",
            "default": false
          },
          "organic": {
            "type": "boolean",
            "default": false
          },
          "locallySourced": {
            "type": "boolean",
            "default": false
          },
          "customRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateVendorDto": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "Business name",
            "example": "Saigon Street Food Co."
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown to customers",
            "example": "Saigon Street Food"
          },
          "description": {
            "type": "string",
            "description": "Business description",
            "example": "Authentic Vietnamese street food with modern twist"
          },
          "businessRegistrationNumber": {
            "type": "string",
            "description": "Business registration number",
            "example": "BRN123456789"
          },
          "taxIdNumber": {
            "type": "string",
            "description": "Tax ID number",
            "example": "TAX987654321"
          },
          "vendorType": {
            "type": "string",
            "description": "Vendor type",
            "enum": [
              "restaurant",
              "cafe",
              "fast_food",
              "beverage",
              "local_specialty",
              "retail",
              "catering",
              "train_service",
              "station_service"
            ],
            "example": "restaurant"
          },
          "contactPersonName": {
            "type": "string",
            "description": "Contact person name",
            "example": "Nguyen Van A"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+84901234567"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email",
            "example": "contact@saigonstreetfood.com"
          },
          "emergencyPhone": {
            "type": "string",
            "description": "Emergency phone number"
          },
          "businessAddress": {
            "type": "string",
            "description": "Business address",
            "example": "123 Nguyen Hue Street, District 1"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Ho Chi Minh City"
          },
          "province": {
            "type": "string",
            "description": "Province/State",
            "example": "Ho Chi Minh"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "70000"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "Vietnam",
            "default": "Vietnam"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner user ID"
          },
          "businessHours": {
            "description": "Business hours",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessHoursDto"
              }
            ]
          },
          "averagePreparationTime": {
            "type": "number",
            "description": "Average preparation time in minutes",
            "example": 15
          },
          "dailyOrderCapacity": {
            "type": "number",
            "description": "Daily order capacity",
            "example": 100
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL"
          },
          "bannerImageUrl": {
            "type": "string",
            "description": "Banner image URL"
          },
          "galleryImages": {
            "description": "Gallery images",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "primaryColor": {
            "type": "string",
            "description": "Primary brand color",
            "example": "#FF6B6B"
          },
          "certifications": {
            "description": "Certifications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationDto"
            }
          },
          "licenses": {
            "description": "Business licenses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseDto"
            }
          },
          "foodSafetyCertified": {
            "type": "boolean",
            "description": "Food safety certified",
            "default": false
          },
          "notificationSettings": {
            "description": "Notification settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationSettingsDto"
              }
            ]
          },
          "specialRequirements": {
            "description": "Special requirements",
            "allOf": [
              {
                "$ref": "#/components/schemas/SpecialRequirementsDto"
              }
            ]
          }
        },
        "required": [
          "businessName",
          "businessRegistrationNumber",
          "vendorType",
          "contactPersonName",
          "contactPhone",
          "contactEmail",
          "businessAddress",
          "country"
        ]
      },
      "UpdateVendorDto": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vendorType": {
            "type": "string",
            "enum": [
              "restaurant",
              "cafe",
              "fast_food",
              "beverage",
              "local_specialty",
              "retail",
              "catering",
              "train_service",
              "station_service"
            ]
          },
          "contactPersonName": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "emergencyPhone": {
            "type": "string"
          },
          "businessAddress": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "businessHours": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "averagePreparationTime": {
            "type": "number"
          },
          "dailyOrderCapacity": {
            "type": "number"
          },
          "acceptsOnlineOrders": {
            "type": "boolean"
          },
          "acceptsAdvanceOrders": {
            "type": "boolean"
          },
          "advanceOrderHours": {
            "type": "number"
          },
          "logoUrl": {
            "type": "string"
          },
          "bannerImageUrl": {
            "type": "string"
          },
          "galleryImages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "certifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationDto"
            }
          },
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseDto"
            }
          },
          "foodSafetyCertified": {
            "type": "boolean"
          },
          "lastInspectionDate": {
            "type": "string"
          },
          "inspectionScore": {
            "type": "string"
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/NotificationSettingsDto"
          },
          "specialRequirements": {
            "$ref": "#/components/schemas/SpecialRequirementsDto"
          }
        }
      },
      "VendorStatusUpdateDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "New vendor status",
            "enum": [
              "pending",
              "approved",
              "suspended",
              "rejected",
              "inactive"
            ]
          },
          "reason": {
            "type": "string",
            "description": "Reason for status change"
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductDiscoveryResponseDto": {
        "type": "object",
        "properties": {
          "trainProducts": {
            "description": "Products available on the train",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "stationProducts": {
            "description": "Products available at upcoming stations",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "meta": {
            "type": "object",
            "description": "Metadata about the search results",
            "properties": {
              "totalCount": {
                "type": "number",
                "example": 42
              },
              "page": {
                "type": "number",
                "example": 1
              },
              "pageSize": {
                "type": "number",
                "example": 20
              },
              "vendors": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "required": [
          "trainProducts",
          "stationProducts",
          "meta"
        ]
      },
      "ProductCategory": {
        "type": "object",
        "properties": {}
      },
      "ProductVariant": {
        "type": "object",
        "properties": {}
      },
      "ProductImage": {
        "type": "object",
        "properties": {}
      },
      "ProductInventory": {
        "type": "object",
        "properties": {}
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Vietnamese Beef Pho"
          },
          "sku": {
            "type": "string",
            "description": "Product SKU",
            "example": "FOOD-PHO-001"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short description"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "active",
              "inactive",
              "out_of_stock",
              "discontinued",
              "pending_approval",
              "expired"
            ],
            "description": "Product status"
          },
          "productType": {
            "type": "string",
            "enum": [
              "physical",
              "digital",
              "service",
              "food",
              "beverage",
              "souvenir",
              "personal_care",
              "electronics",
              "reading_material",
              "pharmaceutical",
              "clothing"
            ],
            "description": "Product type"
          },
          "basePrice": {
            "description": "Base price",
            "example": 65000,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "salePrice": {
            "description": "Sale price",
            "example": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "cost": {
            "description": "Cost price",
            "example": 40000,
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "VND"
          },
          "unitOfMeasure": {
            "type": "string",
            "enum": [
              "piece",
              "kg",
              "g",
              "l",
              "ml",
              "m",
              "cm",
              "pack",
              "box",
              "bottle",
              "can",
              "serving",
              "portion"
            ],
            "description": "Unit of measure"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is product active",
            "example": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Is product visible to customers",
            "example": true
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Is product featured",
            "example": false
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID",
            "format": "uuid"
          },
          "category": {
            "$ref": "#/components/schemas/ProductCategory"
          },
          "vendorId": {
            "type": "string",
            "description": "Vendor ID",
            "format": "uuid"
          },
          "vendor": {
            "$ref": "#/components/schemas/Vendor"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImage"
            }
          },
          "inventories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInventory"
            }
          },
          "price": {
            "type": "number",
            "description": "Current price (computed)",
            "example": 65000
          }
        },
        "required": [
          "name",
          "sku",
          "status",
          "productType",
          "basePrice",
          "cost",
          "currency",
          "unitOfMeasure",
          "isActive",
          "isVisible",
          "isFeatured",
          "categoryId",
          "vendorId",
          "price"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Beverages"
          },
          "code": {
            "type": "string",
            "description": "Category code",
            "example": "BEV001"
          },
          "description": {
            "type": "string",
            "description": "Category description"
          },
          "imageUrl": {
            "type": "string",
            "description": "Image URL"
          },
          "iconUrl": {
            "type": "string",
            "description": "Icon URL"
          },
          "color": {
            "type": "string",
            "description": "Color in hex format"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Is category active",
            "example": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Is category visible",
            "example": true
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID"
          }
        },
        "required": [
          "name",
          "code",
          "sortOrder",
          "isActive"
        ]
      },
      "UpdateInventoryDto": {
        "type": "object",
        "properties": {
          "currentStock": {
            "type": "number",
            "description": "Current stock quantity",
            "example": 100
          },
          "minStockLevel": {
            "type": "number",
            "description": "Minimum stock level for reorder alerts",
            "example": 10
          },
          "maxStockLevel": {
            "type": "number",
            "description": "Maximum stock level",
            "example": 1000
          },
          "unitPrice": {
            "type": "string",
            "description": "Unit price for inventory calculations",
            "example": "25000.00"
          },
          "reorderPoint": {
            "type": "number",
            "description": "Reorder point threshold",
            "example": 15
          },
          "location": {
            "type": "string",
            "description": "Location or warehouse identifier",
            "example": "WAREHOUSE-01"
          }
        }
      },
      "ProductInventoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the inventory record",
            "example": "uuid-string"
          },
          "locationCode": {
            "type": "string",
            "description": "Location code (station, train, or warehouse)",
            "example": "WH-001"
          },
          "locationName": {
            "type": "string",
            "description": "Human readable location name",
            "example": "Main Warehouse"
          },
          "trainCode": {
            "type": "string",
            "description": "Train code for train-specific inventory",
            "example": "TRN-001"
          },
          "carNumber": {
            "type": "string",
            "description": "Car number for car-specific inventory",
            "example": "C1"
          },
          "quantity": {
            "type": "number",
            "description": "Current stock quantity",
            "example": 100
          },
          "reservedQuantity": {
            "type": "number",
            "description": "Reserved quantity for pending orders",
            "example": 10
          },
          "damagedQuantity": {
            "type": "number",
            "description": "Damaged/unusable stock quantity",
            "example": 2
          },
          "lowStockThreshold": {
            "type": "number",
            "description": "Low stock threshold",
            "example": 5
          },
          "maxStockCapacity": {
            "type": "number",
            "description": "Maximum stock capacity",
            "example": 100
          },
          "reorderPoint": {
            "type": "number",
            "description": "Reorder point",
            "example": 10
          },
          "reorderQuantity": {
            "type": "number",
            "description": "Reorder quantity",
            "example": 50
          },
          "lastTransactionType": {
            "type": "string",
            "description": "Last transaction type",
            "enum": [
              "PURCHASE",
              "SALE",
              "ADJUSTMENT",
              "TRANSFER",
              "DAMAGE",
              "RESERVATION",
              "RELEASE_RESERVATION"
            ],
            "example": "PURCHASE"
          },
          "lastTransactionReference": {
            "type": "string",
            "description": "Last transaction reference (Order ID, Transfer ID, etc.)",
            "example": "ORD-123"
          },
          "lastRestockDate": {
            "format": "date-time",
            "type": "string",
            "description": "Last restock date",
            "example": "2023-10-15T10:30:00Z"
          },
          "lastSaleDate": {
            "format": "date-time",
            "type": "string",
            "description": "Last sale date",
            "example": "2023-10-16T14:20:00Z"
          },
          "expiryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Product expiry date",
            "example": "2024-12-31"
          },
          "batchNumber": {
            "type": "string",
            "description": "Batch number",
            "example": "BATCH-001"
          },
          "supplierReference": {
            "type": "string",
            "description": "Supplier reference",
            "example": "SUP-REF-001"
          },
          "storageConditions": {
            "type": "object",
            "description": "Storage conditions requirements",
            "example": {
              "temperature": {
                "min": 2,
                "max": 8,
                "unit": "celsius"
              },
              "humidity": {
                "min": 30,
                "max": 70
              },
              "specialRequirements": [
                "Keep refrigerated"
              ],
              "location": "refrigerated"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the inventory record is active",
            "example": true
          },
          "autoReorder": {
            "type": "boolean",
            "description": "Whether auto-reorder is enabled",
            "example": false
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "costPerUnit": "10.50",
              "supplierInfo": {
                "id": "sup-1",
                "name": "Supplier A"
              },
              "qualityChecks": {
                "passed": true,
                "checkedBy": "John Doe"
              }
            }
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-string"
          },
          "variantId": {
            "type": "string",
            "description": "Product variant ID",
            "example": "uuid-string"
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available quantity (quantity minus reserved)",
            "example": 90
          },
          "stockStatus": {
            "type": "string",
            "description": "Stock status",
            "enum": [
              "out_of_stock",
              "low_stock",
              "in_stock",
              "overstocked"
            ],
            "example": "in_stock"
          },
          "isLowStock": {
            "type": "boolean",
            "description": "Whether stock is low",
            "example": false
          },
          "isOutOfStock": {
            "type": "boolean",
            "description": "Whether out of stock",
            "example": false
          },
          "needsReorder": {
            "type": "boolean",
            "description": "Whether needs reorder",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "example": "2023-10-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp",
            "example": "2023-10-16T14:20:00Z"
          }
        },
        "required": [
          "id",
          "locationCode",
          "quantity",
          "reservedQuantity",
          "damagedQuantity",
          "lowStockThreshold",
          "maxStockCapacity",
          "reorderPoint",
          "reorderQuantity",
          "lastTransactionType",
          "isActive",
          "autoReorder",
          "productId",
          "availableQuantity",
          "stockStatus",
          "isLowStock",
          "isOutOfStock",
          "needsReorder",
          "createdAt",
          "updatedAt"
        ]
      },
      "DimensionsDto": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "volume": {
            "type": "number"
          }
        }
      },
      "NutritionInfoDto": {
        "type": "object",
        "properties": {
          "calories": {
            "type": "number"
          },
          "protein": {
            "type": "number"
          },
          "carbs": {
            "type": "number"
          },
          "fat": {
            "type": "number"
          },
          "fiber": {
            "type": "number"
          },
          "sugar": {
            "type": "number"
          },
          "sodium": {
            "type": "number"
          },
          "allergens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomizationChoiceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "price": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CustomizationOptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "select",
              "multiselect",
              "text",
              "number"
            ]
          },
          "required": {
            "type": "boolean"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomizationChoiceDto"
            }
          }
        },
        "required": [
          "name",
          "type",
          "required"
        ]
      },
      "PortionSizeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "multiplier": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "multiplier"
        ]
      },
      "CustomizationOptionsDto": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomizationOptionDto"
            }
          },
          "spiceLevels": {
            "type": "boolean"
          },
          "portionSizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortionSizeDto"
            }
          }
        }
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "active",
              "inactive",
              "out_of_stock",
              "discontinued",
              "pending_approval",
              "expired"
            ]
          },
          "productType": {
            "type": "string",
            "enum": [
              "physical",
              "digital",
              "service",
              "food",
              "beverage",
              "souvenir",
              "personal_care",
              "electronics",
              "reading_material",
              "pharmaceutical",
              "clothing"
            ]
          },
          "basePrice": {
            "type": "string"
          },
          "salePrice": {
            "type": "string"
          },
          "cost": {
            "type": "string"
          },
          "unitOfMeasure": {
            "type": "string",
            "enum": [
              "piece",
              "kg",
              "g",
              "l",
              "ml",
              "m",
              "cm",
              "pack",
              "box",
              "bottle",
              "can",
              "serving",
              "portion"
            ]
          },
          "weight": {
            "type": "number"
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsDto"
          },
          "categoryId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "isFeatured": {
            "type": "boolean"
          },
          "trackInventory": {
            "type": "boolean"
          },
          "minimumQuantity": {
            "type": "number"
          },
          "maximumQuantity": {
            "type": "number"
          },
          "taxRate": {
            "type": "number"
          },
          "preparationTime": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nutritionInfo": {
            "$ref": "#/components/schemas/NutritionInfoDto"
          },
          "customizationOptions": {
            "$ref": "#/components/schemas/CustomizationOptionsDto"
          }
        }
      },
      "OrderItemCustomizationOptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customization option name"
          },
          "value": {
            "type": "string",
            "description": "Customization option value"
          },
          "price": {
            "type": "string",
            "description": "Additional price for this option"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "OrderItemCustomizationDto": {
        "type": "object",
        "properties": {
          "options": {
            "description": "Customization options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemCustomizationOptionDto"
            }
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special instructions for the item"
          },
          "spicyLevel": {
            "type": "number",
            "description": "Spicy level (0-5)",
            "minimum": 0,
            "maximum": 5
          },
          "allergyNotes": {
            "type": "string",
            "description": "Allergy notes"
          },
          "portionSize": {
            "type": "object",
            "description": "Portion size configuration",
            "example": {
              "name": "Large",
              "multiplier": 1.5
            }
          }
        }
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "format": "uuid"
          },
          "variantId": {
            "type": "string",
            "description": "Product variant ID",
            "format": "uuid"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "minimum": 1
          },
          "customizations": {
            "description": "Customizations for the product",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderItemCustomizationDto"
              }
            ]
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes for this item"
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "Ticket ID for the order",
            "format": "uuid"
          },
          "items": {
            "description": "Array of order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special instructions for the entire order"
          },
          "notes": {
            "type": "string",
            "description": "Customer notes for the order"
          }
        },
        "required": [
          "ticketId",
          "items"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {}
      },
      "OrderMetaDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of orders"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "required": [
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "OrderListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of orders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "Ticket ID for the order",
            "format": "uuid"
          },
          "items": {
            "description": "Array of order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          },
          "specialInstructions": {
            "type": "string",
            "description": "Updated special instructions"
          },
          "notes": {
            "type": "string",
            "description": "Updated customer notes"
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "pending",
              "confirmed",
              "paid",
              "in_preparation",
              "ready",
              "in_delivery",
              "delivered",
              "completed",
              "cancelled",
              "refunded",
              "failed"
            ]
          }
        }
      },
      "RegisterPushTokenDto": {
        "type": "object",
        "properties": {}
      },
      "SendNotificationDto": {
        "type": "object",
        "properties": {}
      },
      "CreatePaymentDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID to create payment for",
            "format": "uuid"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "vnpay",
              "zalopay",
              "momo",
              "viettel_money",
              "bank_transfer",
              "bank_card",
              "credit_card",
              "debit_card",
              "qr_banking",
              "qr_code",
              "cash"
            ]
          },
          "amount": {
            "type": "string",
            "description": "Payment amount as string (for precision)",
            "example": "150000.00"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "VND"
          },
          "returnUrl": {
            "type": "string",
            "description": "Return URL after payment completion"
          },
          "cancelUrl": {
            "type": "string",
            "description": "Cancel URL if payment is cancelled"
          },
          "description": {
            "type": "string",
            "description": "Payment description"
          },
          "metadata": {
            "type": "object",
            "description": "Additional payment metadata"
          }
        },
        "required": [
          "orderId",
          "paymentMethod",
          "amount"
        ]
      },
      "PaymentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment ID",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID",
            "format": "uuid"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method used",
            "enum": [
              "vnpay",
              "zalopay",
              "momo",
              "viettel_money",
              "bank_transfer",
              "bank_card",
              "credit_card",
              "debit_card",
              "qr_banking",
              "qr_code",
              "cash"
            ]
          },
          "amount": {
            "type": "string",
            "description": "Payment amount"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "completed",
              "partial",
              "failed",
              "expired",
              "cancelled",
              "processing",
              "refunded"
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID from payment gateway"
          },
          "gatewayTransactionId": {
            "type": "string",
            "description": "Gateway transaction ID"
          },
          "paymentUrl": {
            "type": "string",
            "description": "Payment URL for redirection"
          },
          "qrCodeData": {
            "type": "string",
            "description": "QR code data for payment"
          },
          "qrCodeUrl": {
            "type": "string",
            "description": "QR code image URL"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Payment creation timestamp"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Payment completion timestamp"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Payment expiration timestamp"
          }
        },
        "required": [
          "id",
          "orderId",
          "paymentMethod",
          "amount",
          "currency",
          "status",
          "transactionId",
          "createdAt"
        ]
      },
      "VNPayWebhookDto": {
        "type": "object",
        "properties": {
          "vnp_Amount": {
            "type": "string"
          },
          "vnp_BankCode": {
            "type": "string"
          },
          "vnp_BankTranNo": {
            "type": "string"
          },
          "vnp_CardType": {
            "type": "string"
          },
          "vnp_OrderInfo": {
            "type": "string"
          },
          "vnp_PayDate": {
            "type": "string"
          },
          "vnp_ResponseCode": {
            "type": "string"
          },
          "vnp_TmnCode": {
            "type": "string"
          },
          "vnp_TransactionNo": {
            "type": "string"
          },
          "vnp_TransactionStatus": {
            "type": "string"
          },
          "vnp_TxnRef": {
            "type": "string"
          },
          "vnp_SecureHash": {
            "type": "string"
          },
          "vnp_SecureHashType": {
            "type": "string"
          }
        },
        "required": [
          "vnp_Amount",
          "vnp_BankCode",
          "vnp_BankTranNo",
          "vnp_CardType",
          "vnp_OrderInfo",
          "vnp_PayDate",
          "vnp_ResponseCode",
          "vnp_TmnCode",
          "vnp_TransactionNo",
          "vnp_TransactionStatus",
          "vnp_TxnRef",
          "vnp_SecureHash"
        ]
      },
      "PaymentWebhookResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "status"
        ]
      },
      "ViettelMoneyWebhookDto": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "order_id": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "merchant_id",
          "transaction_id",
          "order_id",
          "amount",
          "status",
          "timestamp",
          "signature"
        ]
      },
      "ZaloPayWebhookDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "app_trans_id": {
            "type": "string"
          },
          "app_time": {
            "type": "string"
          },
          "app_user": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "embed_data": {
            "type": "string"
          },
          "item": {
            "type": "string"
          },
          "zp_trans_id": {
            "type": "string"
          },
          "server_time": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "merchant_user_id": {
            "type": "string"
          },
          "user_fee_amount": {
            "type": "string"
          },
          "discount_amount": {
            "type": "string"
          },
          "mac": {
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "app_trans_id",
          "app_time",
          "app_user",
          "amount",
          "embed_data",
          "item",
          "zp_trans_id",
          "server_time",
          "channel",
          "merchant_user_id",
          "user_fee_amount",
          "discount_amount",
          "mac"
        ]
      },
      "CreateDeliveryDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "deliveryPersonName": {
            "type": "string"
          },
          "deliveryPersonPhone": {
            "type": "string"
          },
          "pickupStation": {
            "type": "string"
          },
          "deliveryStation": {
            "type": "string"
          },
          "deliveryAddress": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "ready_for_pickup",
              "assigned",
              "picked_up",
              "in_transit",
              "delivered",
              "failed",
              "cancelled"
            ],
            "default": "pending"
          },
          "estimatedDeliveryTime": {
            "type": "string"
          },
          "deliveryNotes": {
            "type": "string"
          },
          "trackingNumber": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "pickupStation",
          "deliveryStation",
          "deliveryAddress",
          "status"
        ]
      },
      "Delivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "deliveryPersonName": {
            "type": "string"
          },
          "deliveryPersonPhone": {
            "type": "string"
          },
          "pickupStation": {
            "type": "string"
          },
          "deliveryStation": {
            "type": "string"
          },
          "deliveryAddress": {
            "type": "string"
          },
          "status": {
            "type": "object"
          },
          "deliveryTaskType": {
            "type": "object"
          },
          "estimatedDeliveryTime": {
            "format": "date-time",
            "type": "string"
          },
          "actualDeliveryTime": {
            "format": "date-time",
            "type": "string"
          },
          "deliveryNotes": {
            "type": "string"
          },
          "trackingNumber": {
            "type": "string"
          },
          "assignedToUserId": {
            "type": "string"
          },
          "scheduledDeliveryTime": {
            "format": "date-time",
            "type": "string"
          },
          "readyAt": {
            "format": "date-time",
            "type": "string"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string"
          },
          "deliveryConfirmation": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "orderId",
          "deliveryPersonName",
          "deliveryPersonPhone",
          "pickupStation",
          "deliveryStation",
          "deliveryAddress",
          "status",
          "deliveryTaskType",
          "estimatedDeliveryTime",
          "actualDeliveryTime",
          "deliveryNotes",
          "trackingNumber",
          "assignedToUserId",
          "scheduledDeliveryTime",
          "readyAt",
          "deliveredAt",
          "deliveryConfirmation",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateDeliveryDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "deliveryPersonName": {
            "type": "string"
          },
          "deliveryPersonPhone": {
            "type": "string"
          },
          "pickupStation": {
            "type": "string"
          },
          "deliveryStation": {
            "type": "string"
          },
          "deliveryAddress": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "ready_for_pickup",
              "assigned",
              "picked_up",
              "in_transit",
              "delivered",
              "failed",
              "cancelled"
            ],
            "default": "pending"
          },
          "estimatedDeliveryTime": {
            "type": "string"
          },
          "deliveryNotes": {
            "type": "string"
          },
          "trackingNumber": {
            "type": "string"
          },
          "actualDeliveryTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "CreateSupportTicketDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "order_issue",
              "payment_issue",
              "delivery_issue",
              "account_issue",
              "technical_issue",
              "feedback",
              "other"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ],
            "default": "medium"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          }
        },
        "required": [
          "subject",
          "description",
          "category",
          "priority"
        ]
      },
      "SupportTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "order_issue",
              "payment_issue",
              "delivery_issue",
              "account_issue",
              "technical_issue",
              "feedback",
              "other"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "resolved",
              "closed"
            ]
          },
          "assignedTo": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          },
          "resolution": {
            "type": "string"
          },
          "resolvedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "ticketNumber",
          "userId",
          "subject",
          "description",
          "category",
          "priority",
          "status",
          "assignedTo",
          "contactEmail",
          "contactPhone",
          "resolution",
          "resolvedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateFaqDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "FAQ question",
            "minLength": 5,
            "maxLength": 500
          },
          "answer": {
            "type": "string",
            "description": "FAQ answer",
            "minLength": 10
          },
          "category": {
            "type": "string",
            "enum": [
              "general",
              "booking",
              "payment",
              "food_ordering",
              "delivery",
              "account",
              "technical"
            ],
            "description": "FAQ category"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "description": "FAQ status",
            "default": "draft"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for display",
            "default": 0
          },
          "tags": {
            "type": "string",
            "description": "Tags for search (comma-separated)"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created this FAQ"
          }
        },
        "required": [
          "question",
          "answer",
          "category"
        ]
      },
      "Faq": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "general",
              "booking",
              "payment",
              "food_ordering",
              "delivery",
              "account",
              "technical"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ]
          },
          "viewCount": {
            "type": "number"
          },
          "helpfulCount": {
            "type": "number"
          },
          "notHelpfulCount": {
            "type": "number"
          },
          "sortOrder": {
            "type": "number"
          },
          "tags": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "question",
          "answer",
          "category",
          "status",
          "viewCount",
          "helpfulCount",
          "notHelpfulCount",
          "sortOrder",
          "tags",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateFaqDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "FAQ question",
            "minLength": 5,
            "maxLength": 500
          },
          "answer": {
            "type": "string",
            "description": "FAQ answer",
            "minLength": 10
          },
          "category": {
            "type": "string",
            "enum": [
              "general",
              "booking",
              "payment",
              "food_ordering",
              "delivery",
              "account",
              "technical"
            ],
            "description": "FAQ category"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "description": "FAQ status",
            "default": "draft"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for display",
            "default": 0
          },
          "tags": {
            "type": "string",
            "description": "Tags for search (comma-separated)"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created this FAQ"
          }
        }
      },
      "UpdateSupportTicketDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "order_issue",
              "payment_issue",
              "delivery_issue",
              "account_issue",
              "technical_issue",
              "feedback",
              "other"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ],
            "default": "medium"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "resolved",
              "closed"
            ]
          },
          "assignedTo": {
            "type": "string"
          },
          "resolution": {
            "type": "string"
          },
          "resolvedAt": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "SystemConfigDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Configuration ID"
          },
          "category": {
            "type": "string",
            "description": "Configuration category"
          },
          "key": {
            "type": "string",
            "description": "Configuration key"
          },
          "value": {
            "type": "object",
            "description": "Configuration value"
          },
          "description": {
            "type": "string",
            "description": "Configuration description"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is configuration active"
          },
          "lastUpdated": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID"
          }
        },
        "required": [
          "id",
          "category",
          "key",
          "value",
          "description",
          "isActive",
          "lastUpdated",
          "updatedBy"
        ]
      },
      "UpdateSystemConfigDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Configuration key"
          },
          "value": {
            "type": "object",
            "description": "New configuration value"
          },
          "description": {
            "type": "string",
            "description": "Updated description"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is configuration active"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "BackupRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Backup type",
            "enum": [
              "full",
              "incremental",
              "differential"
            ],
            "default": "full"
          },
          "includeLogs": {
            "type": "boolean",
            "description": "Include system logs in backup"
          },
          "compress": {
            "type": "boolean",
            "description": "Compress backup file"
          },
          "description": {
            "type": "string",
            "description": "Backup description/notes"
          },
          "excludeTables": {
            "description": "Tables to exclude from backup",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestoreRequestDto": {
        "type": "object",
        "properties": {
          "backupId": {
            "type": "string",
            "description": "Backup ID or filename to restore from"
          },
          "force": {
            "type": "boolean",
            "description": "Force restore even if data exists"
          },
          "includeTables": {
            "description": "Restore specific tables only",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "structureOnly": {
            "type": "boolean",
            "description": "Skip data, restore structure only"
          },
          "restorePoint": {
            "type": "string",
            "description": "Restore point timestamp"
          }
        },
        "required": [
          "backupId"
        ]
      },
      "SystemHealthDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Overall system status"
          },
          "uptime": {
            "type": "number",
            "description": "System uptime in milliseconds"
          },
          "database": {
            "type": "object",
            "description": "Database connection status"
          },
          "externalServices": {
            "type": "object",
            "description": "External services status"
          },
          "resources": {
            "type": "object",
            "description": "System resources"
          },
          "api": {
            "type": "object",
            "description": "API performance metrics"
          },
          "recentErrors": {
            "description": "Recent errors",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Health check timestamp"
          }
        },
        "required": [
          "status",
          "uptime",
          "database",
          "externalServices",
          "resources",
          "api",
          "recentErrors",
          "timestamp"
        ]
      },
      "MaintenanceModeDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable maintenance mode"
          },
          "message": {
            "type": "string",
            "description": "Maintenance message for users"
          },
          "estimatedDuration": {
            "type": "number",
            "description": "Estimated maintenance duration in minutes"
          },
          "affectedServices": {
            "description": "Services affected by maintenance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheduledStart": {
            "type": "string",
            "description": "Scheduled maintenance start time"
          },
          "allowAdminAccess": {
            "type": "boolean",
            "description": "Allow admin access during maintenance"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "CustomerAnalyticsDto": {
        "type": "object",
        "properties": {
          "demographics": {
            "type": "object",
            "description": "Customer demographics breakdown"
          },
          "behavior": {
            "type": "object",
            "description": "Customer behavior metrics"
          },
          "purchasePatterns": {
            "type": "object",
            "description": "Purchase patterns analysis"
          },
          "satisfaction": {
            "type": "object",
            "description": "Customer satisfaction metrics"
          },
          "metadata": {
            "type": "object",
            "description": "Analysis metadata"
          }
        },
        "required": [
          "demographics",
          "behavior",
          "purchasePatterns",
          "satisfaction",
          "metadata"
        ]
      },
      "KpiDashboardDto": {
        "type": "object",
        "properties": {
          "revenue": {
            "type": "object",
            "description": "Revenue KPIs"
          },
          "operational": {
            "type": "object",
            "description": "Operational KPIs"
          },
          "business": {
            "type": "object",
            "description": "Business KPIs"
          },
          "alerts": {
            "description": "Real-time alerts and notifications",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comparisons": {
            "type": "object",
            "description": "KPI comparisons with previous period"
          }
        },
        "required": [
          "revenue",
          "operational",
          "business",
          "alerts",
          "comparisons"
        ]
      },
      "PerformanceMetricsDto": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "object",
            "description": "Order performance metrics"
          },
          "delivery": {
            "type": "object",
            "description": "Delivery performance metrics"
          },
          "system": {
            "type": "object",
            "description": "System performance metrics"
          },
          "vendors": {
            "type": "object",
            "description": "Vendor performance metrics"
          }
        },
        "required": [
          "orders",
          "delivery",
          "system",
          "vendors"
        ]
      },
      "BusinessIntelligenceDto": {
        "type": "object",
        "properties": {
          "marketAnalysis": {
            "type": "object",
            "description": "Market analysis insights"
          },
          "revenueOptimization": {
            "type": "object",
            "description": "Revenue optimization recommendations"
          },
          "operationalEfficiency": {
            "type": "object",
            "description": "Operational efficiency insights"
          },
          "strategicRecommendations": {
            "type": "object",
            "description": "Strategic recommendations"
          },
          "financialProjections": {
            "type": "object",
            "description": "Financial projections"
          }
        },
        "required": [
          "marketAnalysis",
          "revenueOptimization",
          "operationalEfficiency",
          "strategicRecommendations",
          "financialProjections"
        ]
      },
      "PredictiveDemandDto": {
        "type": "object",
        "properties": {
          "forecasts": {
            "type": "object",
            "description": "Demand forecasts"
          },
          "demandDrivers": {
            "type": "object",
            "description": "Demand drivers and factors"
          },
          "modelPerformance": {
            "type": "object",
            "description": "Model performance and accuracy"
          },
          "recommendations": {
            "description": "Recommendations based on predictions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "forecasts",
          "demandDrivers",
          "modelPerformance",
          "recommendations"
        ]
      },
      "SalesTrendsDto": {
        "type": "object",
        "properties": {
          "trends": {
            "description": "Sales trend data over time",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "breakdown": {
            "type": "object",
            "description": "Sales breakdown by different dimensions"
          },
          "growth": {
            "type": "object",
            "description": "Growth metrics and analysis"
          },
          "patterns": {
            "type": "object",
            "description": "Sales patterns and insights"
          }
        },
        "required": [
          "trends",
          "breakdown",
          "growth",
          "patterns"
        ]
      },
      "RevenueAnalyticsDto": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "object",
            "description": "Revenue summary metrics"
          },
          "streams": {
            "type": "object",
            "description": "Revenue streams breakdown"
          },
          "costs": {
            "type": "object",
            "description": "Cost analysis"
          },
          "profitability": {
            "type": "object",
            "description": "Profitability analysis"
          },
          "comparisons": {
            "type": "object",
            "description": "Revenue comparisons"
          }
        },
        "required": [
          "summary",
          "streams",
          "costs",
          "profitability",
          "comparisons"
        ]
      },
      "CustomReportRequestDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Report title"
          },
          "type": {
            "type": "string",
            "description": "Report type",
            "enum": [
              "customer_behavior",
              "sales_trends",
              "performance_metrics",
              "financial_analysis",
              "custom"
            ]
          },
          "period": {
            "type": "string",
            "description": "Analysis period"
          },
          "filters": {
            "type": "object",
            "description": "Report filters"
          },
          "metrics": {
            "description": "Metrics to include in report",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "breakdowns": {
            "description": "Data breakdowns to include",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": [
              "pdf",
              "excel",
              "csv",
              "json"
            ]
          },
          "includeCharts": {
            "type": "boolean",
            "description": "Include visualizations"
          },
          "description": {
            "type": "string",
            "description": "Report description"
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule report generation"
          },
          "recipients": {
            "description": "Report recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "type",
          "period"
        ]
      },
      "CheckInDto": {
        "type": "object",
        "properties": {
          "shiftId": {
            "type": "string",
            "description": "Shift ID to check into"
          },
          "location": {
            "type": "object",
            "description": "Check-in location coordinates"
          },
          "deviceInfo": {
            "type": "object",
            "description": "Device information"
          },
          "notes": {
            "type": "string",
            "description": "Check-in notes or comments"
          },
          "photoVerification": {
            "type": "string",
            "description": "Photo verification (base64 or URL)"
          }
        },
        "required": [
          "shiftId",
          "location"
        ]
      },
      "ShiftStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shift ID"
          },
          "shiftDate": {
            "type": "string",
            "description": "Shift date"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "scheduled",
              "checked_in",
              "in_progress",
              "checked_out",
              "completed",
              "cancelled"
            ]
          },
          "scheduledStart": {
            "type": "string",
            "description": "Scheduled start time"
          },
          "scheduledEnd": {
            "type": "string",
            "description": "Scheduled end time"
          },
          "actualStart": {
            "type": "string",
            "description": "Actual check-in time"
          },
          "actualEnd": {
            "type": "string",
            "description": "Actual check-out time"
          },
          "location": {
            "type": "string",
            "description": "Shift location/station"
          },
          "shiftType": {
            "type": "string",
            "description": "Shift type"
          },
          "assignedTasks": {
            "type": "number",
            "description": "Assigned tasks count"
          },
          "completedTasks": {
            "type": "number",
            "description": "Completed tasks count"
          },
          "breakTime": {
            "type": "number",
            "description": "Break time taken (minutes)"
          },
          "performanceScore": {
            "type": "number",
            "description": "Performance score (1-10)"
          }
        },
        "required": [
          "id",
          "shiftDate",
          "status",
          "scheduledStart",
          "scheduledEnd",
          "location",
          "shiftType"
        ]
      },
      "CheckOutDto": {
        "type": "object",
        "properties": {
          "location": {
            "type": "object",
            "description": "Check-out location coordinates"
          },
          "completedTasks": {
            "description": "Tasks completed during shift",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issues": {
            "description": "Issues encountered during shift",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "type": "string",
            "description": "Check-out summary notes"
          },
          "selfRating": {
            "type": "number",
            "description": "Self-assessment rating (1-5)"
          }
        }
      },
      "ShiftReportDto": {
        "type": "object",
        "properties": {
          "overallRating": {
            "type": "number",
            "description": "Overall shift rating (1-5)"
          },
          "completedTasks": {
            "description": "Tasks completed during shift",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issues": {
            "description": "Issues encountered during shift",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestions": {
            "description": "Suggestions for improvement",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalComments": {
            "type": "string",
            "description": "Additional comments"
          },
          "attachments": {
            "description": "Photo attachments",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acknowledgments": {
            "description": "Acknowledgments or recognitions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "overallRating",
          "completedTasks"
        ]
      },
      "ShiftPerformanceDto": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "Performance period"
          },
          "metrics": {
            "type": "object",
            "description": "Overall performance metrics"
          },
          "trends": {
            "description": "Performance trends over time",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feedback": {
            "type": "object",
            "description": "Strengths and areas for improvement"
          },
          "comparisons": {
            "type": "object",
            "description": "Comparison with team/department averages"
          },
          "awards": {
            "description": "Awards and recognitions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "period",
          "metrics",
          "trends",
          "feedback",
          "comparisons"
        ]
      },
      "QrDeliveryConfirmationDto": {
        "type": "object",
        "properties": {
          "qrCode": {
            "type": "string",
            "description": "Customer QR code data"
          },
          "deliveryLocation": {
            "type": "string",
            "description": "Delivery location details"
          },
          "customerPhone": {
            "type": "string",
            "description": "Customer phone number for verification"
          },
          "notes": {
            "type": "string",
            "description": "Delivery notes or special instructions"
          },
          "photoEvidence": {
            "description": "Photo evidence of delivery",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerSignature": {
            "type": "string",
            "description": "Customer signature (base64)"
          },
          "verificationMethod": {
            "type": "string",
            "description": "Delivery verification method"
          },
          "gpsLocation": {
            "type": "object",
            "description": "GPS coordinates of delivery"
          }
        },
        "required": [
          "qrCode",
          "deliveryLocation"
        ]
      },
      "StaffScheduleDto": {
        "type": "object",
        "properties": {
          "staffId": {
            "type": "string",
            "description": "Staff member ID"
          },
          "period": {
            "type": "object",
            "description": "Schedule period"
          },
          "shifts": {
            "description": "Scheduled shifts",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statistics": {
            "type": "object",
            "description": "Schedule statistics"
          },
          "preferences": {
            "type": "object",
            "description": "Availability preferences"
          }
        },
        "required": [
          "staffId",
          "period",
          "shifts",
          "statistics"
        ]
      },
      "TaskAssignmentDto": {
        "type": "object",
        "properties": {
          "staffIds": {
            "description": "Staff IDs to assign tasks to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tasks": {
            "description": "Tasks to assign",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "type": "string",
            "description": "Assignment notes"
          },
          "autoAssign": {
            "type": "boolean",
            "description": "Auto-assign based on workload"
          },
          "sendNotifications": {
            "type": "boolean",
            "description": "Send immediate notifications"
          }
        },
        "required": [
          "staffIds",
          "tasks"
        ]
      },
      "VendorStaffResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Staff member ID"
          },
          "name": {
            "type": "string",
            "description": "Staff member full name"
          },
          "email": {
            "type": "string",
            "description": "Staff member email address"
          },
          "phone": {
            "type": "string",
            "description": "Staff member phone number"
          },
          "role": {
            "type": "string",
            "description": "Staff role"
          },
          "department": {
            "type": "string",
            "description": "Staff department"
          },
          "position": {
            "type": "string",
            "description": "Staff position/title"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether staff account is active"
          },
          "vendorId": {
            "type": "string",
            "description": "Vendor ID this staff belongs to"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date staff was added"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date"
          },
          "lastLoginAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last login date"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "phone",
          "role",
          "isActive",
          "vendorId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateVendorStaffDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Staff member full name"
          },
          "email": {
            "type": "string",
            "description": "Staff member email address"
          },
          "phone": {
            "type": "string",
            "description": "Staff member phone number"
          },
          "role": {
            "type": "string",
            "description": "Staff role",
            "enum": [
              "vendor_staff",
              "vendor_admin",
              "cashier"
            ]
          },
          "department": {
            "type": "string",
            "description": "Staff department"
          },
          "position": {
            "type": "string",
            "description": "Staff position/title"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "role"
        ]
      },
      "UpdateVendorStaffDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Staff member full name"
          },
          "email": {
            "type": "string",
            "description": "Staff member email address"
          },
          "phone": {
            "type": "string",
            "description": "Staff member phone number"
          },
          "role": {
            "type": "string",
            "description": "Staff role",
            "enum": [
              "vendor_staff",
              "vendor_admin",
              "cashier"
            ]
          },
          "department": {
            "type": "string",
            "description": "Staff department"
          },
          "position": {
            "type": "string",
            "description": "Staff position/title"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether staff account is active"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          }
        }
      },
      "StaffReassignmentDto": {
        "type": "object",
        "properties": {
          "staffId": {
            "type": "string",
            "description": "ID of the staff member to reassign",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "vendorId": {
            "type": "object",
            "description": "ID of the vendor to assign staff to (null to unassign)",
            "example": "b2c3d4e5-f6g7-8901-bcde-f12345678901"
          },
          "reason": {
            "type": "string",
            "description": "Reason for reassignment",
            "example": "Staff transferred to SE2 train service"
          }
        },
        "required": [
          "staffId",
          "reason"
        ]
      },
      "CreateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Article title",
            "minLength": 5,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Article slug (auto-generated if not provided)",
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "Article content",
            "minLength": 10
          },
          "excerpt": {
            "type": "string",
            "description": "Article excerpt/summary",
            "maxLength": 500
          },
          "featuredImage": {
            "type": "string",
            "description": "Featured image URL",
            "maxLength": 500
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "published",
              "archived"
            ],
            "description": "Article status",
            "default": "draft"
          },
          "tagIds": {
            "description": "Array of tag IDs to associate with the article",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishNow": {
            "type": "boolean",
            "description": "Publish article immediately after creation",
            "default": false
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "TagResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tag ID"
          },
          "name": {
            "type": "string",
            "description": "Tag name"
          },
          "slug": {
            "type": "string",
            "description": "Tag slug"
          },
          "description": {
            "type": "string",
            "description": "Tag description"
          },
          "color": {
            "type": "string",
            "description": "Tag color"
          },
          "parentId": {
            "type": "string",
            "description": "Parent tag ID"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is tag active"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update date"
          },
          "children": {
            "description": "Child tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponseDto"
            }
          },
          "parent": {
            "description": "Parent tag",
            "allOf": [
              {
                "$ref": "#/components/schemas/TagResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "sortOrder",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "ArticleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Article ID"
          },
          "title": {
            "type": "string",
            "description": "Article title"
          },
          "slug": {
            "type": "string",
            "description": "Article slug"
          },
          "content": {
            "type": "string",
            "description": "Article content"
          },
          "excerpt": {
            "type": "string",
            "description": "Article excerpt"
          },
          "featuredImage": {
            "type": "string",
            "description": "Featured image URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "published",
              "archived"
            ],
            "description": "Article status"
          },
          "authorId": {
            "type": "string",
            "description": "Author ID"
          },
          "publishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Published date"
          },
          "viewCount": {
            "type": "number",
            "description": "View count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update date"
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID"
          },
          "tags": {
            "description": "Article tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponseDto"
            }
          }
        },
        "required": [
          "id",
          "title",
          "slug",
          "content",
          "status",
          "authorId",
          "viewCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "pageSize": {
            "type": "number",
            "description": "Items per page"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages"
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Has next page"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Has previous page"
          }
        },
        "required": [
          "page",
          "pageSize"
        ]
      },
      "PaginatedArticleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of articles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Article title",
            "minLength": 5,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Article slug",
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "Article content",
            "minLength": 10
          },
          "excerpt": {
            "type": "string",
            "description": "Article excerpt/summary",
            "maxLength": 500
          },
          "featuredImage": {
            "type": "string",
            "description": "Featured image URL",
            "maxLength": 500
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "published",
              "archived"
            ],
            "description": "Article status"
          },
          "tagIds": {
            "description": "Array of tag IDs to associate with the article",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishedAt": {
            "type": "string",
            "description": "Published date (ISO string)",
            "format": "date-time"
          }
        }
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name",
            "minLength": 2,
            "maxLength": 100
          },
          "slug": {
            "type": "string",
            "description": "Tag slug (auto-generated if not provided)",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Tag description",
            "maxLength": 500
          },
          "color": {
            "type": "string",
            "description": "Tag color (hex format)",
            "example": "#FF5733"
          },
          "parentId": {
            "type": "string",
            "description": "Parent tag ID for hierarchical structure"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order",
            "default": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is tag active",
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name",
            "minLength": 2,
            "maxLength": 100
          },
          "slug": {
            "type": "string",
            "description": "Tag slug",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Tag description",
            "maxLength": 500
          },
          "color": {
            "type": "string",
            "description": "Tag color (hex format)",
            "example": "#FF5733"
          },
          "parentId": {
            "type": "string",
            "description": "Parent tag ID for hierarchical structure"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is tag active"
          }
        }
      }
    }
  }
}
